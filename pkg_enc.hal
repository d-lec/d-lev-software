
////////////////
// XSR_7 SUBS //
////////////////

// VEC16_DEB(0:in, 7:rtn | 0:deb)
// stability debounce 16 inputs en masse
// deb := in if (in == old) for tmax calls
@vec16_deb {
	s1 :hu= mem[@old_ds]	// get old  ** VEC16_DEB() START ** 
	mem[@old_ds] :h= s0	// sto old	
	(s0 == s1) ? pc := @no_chg	// (in == old) ?
	s2 := 0	// 0
	mem[@timer_ds] :b= P2	// timer := 0	
	pc := @done	// => done
@no_chg	P1 :bu= mem[@timer_ds]	// get timer (pop old)
	s2 := 240	// tmax (50ms @ 48kHz/10)
	(s1 !<u P2) ? pc := @t_max	// (timer !< tmax) ?
	P1 += 1	// timer++
	mem[@timer_ds] :b= s1	// sto timer
	pc := @done	// => done
@t_max	mem[@deb_ds] :h= s0	// sto deb
@done	P0 :hu= mem[@deb_ds]	// get deb
	pc := P7, P1	// => RETURN
@old_ds {	mem[1] :h= ( 0 ) }	// ** OLD_DS **
@deb_ds {	mem[1] :h= ( 0 ) }	// ** DEB_DS **
@timer_ds {	mem[1] :b= ( 0 ) } }	// ** TIMER_DS **  ** SUB END **


// INPUT_DEB(7:rtn | -) 
// read encoder reg (COR) & debounce pb byte
// read gpio reg & debounce byte
@input_deb {	s0 := reg[`reg_enc]	// get enc_reg data  ** INPUT_DEB() START ** 
	mem[@enc_rot_ds] :h= s0	// sto enc_rot[15:0]
	P0 >>= 16	// enc_pb[7:0] data
	s5 := reg[`reg_io]	// get gpio_reg data
	P5 <<= 8	// gpio_reg << 8
	P0 |= P5	// enc_pb | gpio
	s7 := pc := @vec16_deb	// <=> vec16_deb()
	mem[@pb_deb_ds] :b= s0	// sto pb_deb	
	P0 >>= 8	// deb16 >> 8
	mem[@gpio_deb_ds] :b= P0	// sto gpio_deb
	pc := P7 }	// => RETURN  ** SUB END **

	
/*
// dummy function for testing w/ no velocity
@enc_slim {	s2 := 0, P0
	pc := P7 }	// => RETURN
*/
// ENC_SLIM(0:in, 7:rtn | 2:out) 
// signed I/O
// 10 cycles max
@enc_slim {	s2 := mem[@accum_ds]	// get accum (out)  ** ENC_SLIM() START **
	(s0 == 0) ? pc := @in_z	// (in == 0) ?
	s2 +s= P0	// accum + in (cpy)
	P2 := sat(s2)	// sat(accum + in)
	mem[@accum_ds] := P2	// sto
	pc := P7	// => RETURN
@in_z	P0 := 89478	// dec (1.0 sec decay from fs, 48kHz) (pop in)
	s3 := sgn(s2)	// sgn(accum)
	s2 *s= s3	// abs(accum) (cpy) 
	(P2 !<u s0) ? pc := @a_nlt_i	// (|accum| !< inc) ?
	s2 := 0	// accum := 0
	mem[@accum_ds] := P2, P3	// sto
	pc := P7, P0	// => RETURN
@a_nlt_i	P0 *= P3	// inc *= sgn(accum)
	s2 -= P0	// accum - inc (cpy)
	mem[@accum_ds] := P2	// sto
	pc := P7	// => RETURN
@accum_ds {	mem[1] := ( 0 ) } }	// ** ACCUM_DS **  ** SUB END **


// ENC_ACCUM(1:enc, 7:rtn | 1:enc) 
// accumulate encoder rotation inc & velocity
// need to kill -2 inc value b/c ambiguous (+/-2)
// NOTE: erev is reversed to match Bourns encoders.
// 27 +10 = 37 cycles max
@enc_accum {	s0 :hu= mem[@enc_rot_ds]	// get enc_rot bytes  ** ENC_ACCUM() START ** 
	s1 *= 2	// enc * 2 (2 bit data field) (cpy)
	P1 := 30 - s1	// 30 - (enc * 2)
	P0 <<= P1	// enc_rot << 30 - (enc * 2)
	P0 >>>= 30	// inc (isolate & sign extend)
	s3 := -2	// inc to kill (ambiguous)
	(s1 != P3) ? pc := @ok	// (inc != -2) ?
	P0 := 0	// inc := 0 (kill)
@ok	s3 := mem[@s_p3_ds]	// get erev[0:1]
	(P3 != 0) ? pc := @nrev	// (erev != 0) ?
	P0 *= -1	// -inc
@nrev	s0 <<= 28	// inc gain up (4x headroom) (cpy)
	s7 := pc := @enc_slim	// <=> enc_slim()
	P2 >>>= 27	// vel gain down
	P2++	// bias +1/2
	P2 >>>= 1	// 
	s3 := sgn(s2)	// sgn(vel)
	P2 *s= s0	// vel * inc
	P2 := lim(s2)	// lim(vel * inc)
	P2 *= P3	// vel sign ~restore
	s4 := @enc_accum_ds	// get accum_addr
	P4 += s1	// addr + enc
	s5 :bs= mem[s4]	// get accum
	P5 += P0	// accum inc
	P5 += P2	// accum vel	
	mem[P4] :b= P5	// sto accum
	pc := P7 }	// => RETURN


////////////////
// data store //
////////////////
@enc_rot_ds {	mem[1] :h= ( 0 ) }	// ** ENC_ROT_DS **
@pb_deb_ds {	mem[1] :b= ( 0 ) }	// ** PB_DEB_DS **
@gpio_deb_ds {	mem[1] :b= ( 0 ) }	// ** GPIO_DEB_DS **
@enc_accum_ds {	mem[8] :b= ( 0 ) }	// ** ENC_ACCUM_DS **



////////////////
// THD_7 SUBS //
////////////////

// ENC_DELTA_UPD(7:rtn | -) 
// update encoder deltas via modulo subtraction
// also update enc_chg_ds
@enc_delta_upd {	s2 := 0	// enc_chg  ** ENC_DELTA_UPD() START **
	s3 := @old_ds	// old_addr
	s4 := @enc_accum_ds	// accum_addr
	s5 := s4 + 8	// end_addr
	s6 := @enc_delta_ds	// delta_addr
@loop	s0 :bs= mem[s4]	// <loop start> get accum
	s1 :bs= mem[s3]	// get old
	mem[s3] :b= s0	// sto old
	P0 -= P1	// delta := accum - old
	(s0 == 0) ? pc := @dz	// (delta == 0) ?
	P2++	// enc_chg++
@dz	mem[s6] :b= P0	// sto delta
	P3++	// old_addr++
	P4++	// accum_addr++
	P6++	// delta_addr++
	P2 >>r= 1	// enc_chg >>r 1
	(s4 <u s5) ? pc := @loop	// <loop end> (accum_addr < end_addr) ?
	P2 <<r= 8	// enc_chg <<r 8
	mem[@enc_chg_ds] :b= P2	// sto enc_chg
	P6 P5 P4 P3	// clean
	pc := P7	// => RETURN
@old_ds {	mem[8] :b= ( 0 ) } }	// ** OLD_DS **  ** SUB END **


// PB_CHG(7:rtn | -) 
// one-hot encoder pb change & pb press flags
// pb_ds : sampled deb
// pb_chg_ds : pb change, active hi
// pb_act_ds : pb pressed, active hi
@pb_chg {	s0 :bu= mem[@pb_ds]	// get pb   ** PB_CHG() START **
	s1 :bu= mem[@pb_deb_ds]	// get pb_deb
	mem[@pb_ds] :b= s1	// sto pb
	P0 ^= s1	// pb_chg := pb ^ pb_deb
	mem[@pb_chg_ds] :b= s0	// sto pb_chg
	P0 &= P1	// pb_act := pb_chg & pb_deb
	mem[@pb_act_ds] :b= P0	// sto pb_act
	pc := P7 }	// => RETURN  ** SUB END **


// ENC_UPD(7:rtn | -) 
// calc enc_delta, enc_chg, pb_chg
@enc_upd {	s7 := pc := @enc_delta_upd	// <=> enc_delta_upd()  ** ENC_UPD() START ** 
	s7 := pc := @pb_chg	// <=> pb_chg()
	pc := P7 }	// => RETURN  ** SUB END **


// GPIO_UPD(7:rtn | -) 
// one-hot change & press flags
// gpio_ds : sampled deb
// gpio_chg_ds : change, active hi one sample period
// gpio_act_ds : pressed, active hi one sample period
@gpio_upd {	s0 :bu= mem[@gpio_ds]	// get gpio   ** GPIO_UPD() START **
	s1 :bu= mem[@gpio_deb_ds]	// get gpio_deb
	mem[@gpio_ds] :b= s1	// sto gpio
	P0 ^= s1	// gpio_chg := gpio ^ gpio_deb
	mem[@gpio_chg_ds] :b= s0	// sto gpio_chg
	P0 &= P1	// gpio_act := gpio_chg & gpio_deb
	mem[@gpio_act_ds] :b= P0	// sto gpio_act
	pc := P7 }	// => RETURN  ** SUB END **


////////////////
// data store //
////////////////
@enc_delta_ds {	mem[8] :b= ( 0 ) }	// ** ENC_DELTA_DS **
@pb_ds {	mem[1] :b= ( 0 ) }	// ** PB_DS **
@pb_chg_ds {	mem[1] :b= ( 0 ) }	// ** PB_CHG_DS **
@gpio_ds {	mem[1] :b= ( 0 ) }	// ** GPIO_DS **
@gpio_chg_ds {	mem[1] :b= ( 0 ) }	// ** GPIO_CHG_DS **
// keep these contiguous & in order!
@enc_chg_ds {	mem[1] :b= ( 0 ) }	// ** ENC_CHG_DS **
@pb_act_ds {	mem[1] :b= ( 0 ) }	// ** PB_ACT_DS **
@gpio_act_ds {	mem[1] :h= ( 0 ) }	// ** GPIO_ACT_DS ** (note: msB = 0)

