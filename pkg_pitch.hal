// PITCH_CENT(0:in, 1:cent, 7:rtn | 0:out) 
// linear pitch offset in cents
// uint 5.27 I/O
@pitch_cent {	s2 := 0x1b4e8	// ** PITCH_CENT() START **
	P1 *= P2	// cent scale
	P0 +us= P1	// offset
	P0 := lim(s0)	// lim
	pc := P7 }	// => RETURN  ** SUB END **


// NOTE_SPAN(0:in, 4:span, 7:rtn | 0:out) 
// unsigned pitch number in, signed correcting value out
// to use: multiply output by 0xaaaaab, which is (2^27)/12; then in + out
@note_span {	P0 *u= 384	// note_u := in * (12 * 2^5)  ** NOTE_SPAN() START ** 
	s1 := s0	// cpy note_u
	P0 := nsb(s0)	// note_u => note_s
	s2 := s0	// cpy note_s
	s4 >>>= 16	// span >>> 16 (cpy)
	P2 *su= P4	// int_s := note_s * (span >>> 16)
	P2 := sat(s2)	// sat
	P4 <<= 16	// span << 16
	P0 *xsu= P4	// frac_s := note_s * (span << 16)
	P0 +s= P2	// tot_s := frac_s + int_s
	P0 := sat(s0)	// sat_s := sat(tot_s)
	P0 := nsb(s0)	// sat_s => sat_u
	P0 -= P1	// corr_s := sat_u - note_u
	pc := P7 }	// => RETURN  ** SUB END **


// PITCH_CNTR(0:in, 7:rtn | 0:out) 
// pitch number converted to note triangle
@pitch_cntr {	P0 *u= 384	// note sawtooth  ** PITCH_CNTR **
	s1 := s0 >>> 31	// full sgn
	P0 ^= P1	// saw => tri/2
	P0 <<= 1	// tri
	pc := P7 }	// RETURN =>


// PC_CNTR_MOD(0:in, 1:rate, 2:cntr, 7:rtn | 0:out) 
// pitch number converted to note triangle
// combined with rate, exp2, then bi-modally lp filtered
// unsigned I/O
@pc_cntr_mod {	s7 := pc := @pitch_cntr	// <=> pitch_cntr()  ** PC_CNTR_MOD **
	P0 := ~s0	// ~tri
	P0 := nsb(s0)	// uns => sgn
	P0 >>>= 1	// ~tri/2
	P0 *xsu= P2	// ~tri/2 * cntr
	P1 := nsb(s1)	// uns => sgn
	P1 >>>= 1	// rate/2
	P1 := nsb(s1)	// sgn => uns
	P0 += P1	// ~tri/2 + rate/2
	s3 := 1 << 31	// 96dB mult & offs
	P0 *xu= s3
	P0 +u= P3
	s7 := pc := @exp2_uint_np	// <=> exp2_uint_np()
	s1 := 0x55c2c6	// fall := 10Hz
	s2 := 0x8937a	// rise := 1Hz
	s6 := @lp1_ds	// lp1_ds addr
	s7 := pc := @lp1_ubi	// <=> lp1_ubi()
	pc := P7	// RETURN =>
@lp1_ds	mem[1] := ( 0 ) }	// ** LP1_DS **  ** SUB END **


// PITCH_CORR(0:in, 1:rate, 2:cmod, 3:corr, 4:span, 7:rtn | 0:out) 
// chromatic pitch correction / quantization
// uint 5.27 I/O
@pitch_corr {	s5 := s0	// cpy in  ** PITCH_CORR() START **
	s0 := s0	// cpy in
	s7 := pc := @pc_cntr_mod	// <=> pc_cntr_mod()
	s1 := P0 >> 6	// rate >> 6 (~21ms @ rate max & cmod min)
	s7 := pc := @note_span	// <=> note_span()
	P0 *xsu= P3	// span * corr
	s6 := @slim_ds	// slim_ds addr
	s7 := pc := @slim	// <=> slim()
	s2 := 0xaaaaab	// (2^27)/12
	P0 *xsu= P2	// slim * (2^27)/12
	P5 +us= P0	// in + slim
	s0 := lim(P5)	// lim result
	pc := P7	// => RETURN
@slim_ds	mem[1] := ( 0 ) }	// ** SLIM_DS **  ** SUB END **


// PITCH_QUANT(0:in, 7:rtn | 0:out) 
// unsigned pitch number I/O
@pitch_quant {	s1 := s0 *u 384	// note := in * 12/(2^27) * (2^32) ** PITCH_QUANT() START ** 
	s2 := 0xaaaaab	// (2^27)/12
	P1 *xsu= P2	// note * (2^27)/12 (treat as signed)
	P0 -us= P1	// in - (note * (2^27)/12)
	P0 := lim(s0)	// lim result
	pc := P7 }	// => RETURN  ** SUB END **

