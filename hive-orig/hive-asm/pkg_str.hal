
// General rules are: 
// - mem[s6]   :b= len (length) 
// - mem[s6+1] :b= lim (limit) 
// - mem[s6+2] :b= ch (ch store base) 
// - input ch @ s0 is consumed or replaced 
// - input addr @ s6 is NOT consumed 

// STR_CLR(6:addr, 7:rtn | 6:addr) 
// clear str (len only) 
@str_clr {	s1 := 0	// ** STR_CLR() START **
	mem[s6] :b= P1	// clr len
	pc := P7 }	// RETURN =>  ** SUB END **

	
// STR_LEN(6:addr, 7:rtn | 0:len, 6:addr) 
// return str length 
@str_len {	s0 :bu= mem[s6]	// ** STR_LEN() START **  get len
	pc := P7 }	// RETURN =>  ** SUB END **

	
// STR_TOP(6:addr, 7:rtn | 0:ch, 1:len, 6:addr) 
// return last ch & len (zero ch if len zero)
@str_top {	s1 :bu= mem[s6]	// ** STR_TOP() START **  get len
	(s1 != 0) ? pc := @nz	// chk len
	s0 := 0	// zero ch
	pc := P7	// => RETURN
@nz	s1 += s6	// addr offset (+1)
	s0 :bu= mem[P1+1]	// get ch (-1)
	pc := P7 }	// RETURN =>  ** SUB END **

	
// STR_PUSH(0:ch, 6:addr, 7:rtn | 6:addr) 
// push ch to str
@str_push {	s1 :bu= mem[s6]	// ** STR_PUSH() START **  get len
	s2 :bu= mem[s6+1]	// get lim
	(s1 <u P2) ? pc := @ok	// chk len
	P1 P0	// clean
	pc := P7 	// => RETURN
@ok	s1 += s6	// addr offset
	mem[P1+2] :b= P0	// sto ch
	P1++	// len++
	mem[s6] :b= P1	// sto len
	pc := P7 }	// RETURN =>  ** SUB END **

	
// STR_COPY(0:src_addr, 6:dest_addr, 7:rtn | 6:dest_addr) 
// append src_str @0 to dest_str @6
@str_copy {	s1 :bu= mem[s0]	// ** STR_COPY() START **  get src_len
	P1 += s0	// src_len += src_addr
	(s0 !<u s1) ? pc := @done	// chk
@loop	s0 :bu= mem[s0+2]	// <loop start> get src ch
	s7 := pc := @str_push	// <=> str_push()
	P0++	// inc src addr
	(s0 <u s1) ? pc := @loop	// <loop end>
@done	P1 P0	// clean
	pc := P7 }	// RETURN =>  ** SUB END **


// MEM_TO_STR(0:mem_addr, 1:chars, 6:str_addr, 7:rtn | 6:str_addr) 
// append chars in mem to str
@mem_to_str {	P1 += s0	// end_addr := chars + mem_addr  ** MEM_TO_STR() START **
@loop	s0 :bu= mem[s0]	// <loop start> get ch
	s7 := pc := @str_push	// <=> str_push()
	P0++	// mem_addr++
	(s0 <u s1) ? pc := @loop	// (mem_addr < end_addr) ? <loop end>
	P1 P0	// clean
	pc := P7 }	// RETURN =>  ** SUB END **


// STR_BKSP(0:bksp, 6:addr, 7:rtn | 0:len, 6:addr) 
// discard ch(s) from str, return len 
// if (len < bksp) then len = 0 
@str_bksp {	s1 :bu= mem[s6]	// ** STR_BKSP() START **  get len
	(s1 !<u s0) ? pc := @ok	// ok if (len >= bksp)
	P0 := s1	// set bksp := len
@ok	P1 -= P0	// len - bksp
	s0 := P1	// mov
	mem[s6] :b= s0	// sto len
	pc := P7 }	// RETURN =>  ** SUB END **

	
// STR_TO_TX(6:addr, 7:rtn | 6:addr) 
// transmit str via tx uart 
@str_to_tx {	s1 :bu= mem[s6]	// ** STR_TO_TX() START **  get len 
	(s1 != 0) ? pc := @ok	// chk len
	pc := P7, P1	// => RETURN
@ok	P1 += s6	// offset len
	s2 := s6	// init idx
@loop	s0 :bu= mem[s2+2]	// <loop start> get ch
	s7 := pc := @ch_tx	// => ch_tx()
	P2++	// idx++
	(s2 <u s1) ? pc := @loop	// <loop end> chk idx
	P2 P1	// clean up
	pc := P7 }	// RETURN =>  ** SUB END **


// UINT_TO_HEX_STR(0:uint, 6:addr, 7:rtn | 6:addr) 
// convert unsigned 32 bit input integer to hex str @ addr 
// leading zeros are NOT suppressed 
@uint_to_hex_str {	s1 := 7	// ** UINT_TO_HEX_STR() START **  loop idx
@loop	s0 >>= 28	// <loop start>  shift (copy)
	s7 := pc := @hex_to_ch	// => hex_to_ch()
	s7 := pc := @str_push	// => str_push()
	P0 <<= 4	// shift
	P1--	// idx--
	(s1 !< 0) ? pc := @loop	// <loop end> 
	P1 P0	// clean
	pc := P7 }	// RETURN =>  ** SUB END **

	
// UINT16_TO_BCD4  - (0:uint16, 7:rtn | 0:bcd) 
// return BCD of 16 bit unsigned value, [0:9999] range
// no input bounds error checking
// 26 cycles max/min 
@uint16_to_bcd4 {	s1 := 0x68db9	// ** UINT16_TO_BCD4() START **  (2^32)/(10^4)
	s2 := 10	// base 10
	s3 := 2	// loop idx
	P0 *= P1	// scale bin
	s1 := s0	// copy bin
	P0 *xu= s2	// bcd := bin *xu 10  (1st digit)
@loop	P1 *= s2	// bin * 10 <loop start>
	s1 *xu= s2	// bin *xu 10
	P0 <<= 4	// bcd << 4
	P0 |= P1	// comb bcd
	P3--	// idx--
	(s3 !< 0) ? pc := @loop	// (idx !< 0) ? <loop end> 
	P3 P2 P1	// clean
	pc := P7 }	// RETURN =>  ** SUB END **

	
// INT16_TO_BCD4_STR(0:int16, 6:addr, 7:rtn | 6:addr) 
// convert signed 16 bit input integer to BCD str @ addr 
// leading zeros are suppressed 
@int16_to_bcd4_str {	s1 := sgn(s0)	// ** INT16_TO_BCD_STR() START **  get sgn
	P0 *= s1	// abs val
	s7 := pc := @uint16_to_bcd4	// => @uint16_to_bcd4()
	s2 := lzc(s0)	// lzc
	P2 >>= 2	// /= 4
	s2 <<= 2	// *= 4
	P0 <<= P2	// initial shl
	s3 := 7
	P3 -= s2	// idx
	P2 -= 5	// spc-1
	(s0 != 0) ? pc := @nz	// chk 0
	P2--	// adj spc
@nz	(s1 !< 0) ? pc := @nneg0	// chk sgn
	P2--	// adj spc
@nneg0	(s2 < 0) ? pc := @nspc	// chk spc
@loop0	s0 := ' '	// <loop0 start> ' '
	s7 := pc := @str_push	// => str_push()
	P2--	// spc--
	(s2 !< 0) ? pc := @loop0	// <loop0 end>
@nspc	(P1 !< 0) ? pc := @nneg1	// chk sgn
	s0 := '-'	// '-'
	s7 := pc := @str_push	// => str_push()
@nneg1	nop	// get idx
@loop1	s0 >>= 28	// <loop1 start>  shift (copy)
	P0 += 0x30	// ascii offset
	s7 := pc := @str_push	// => str_push()
	P0 <<= 4	// shift
	P3--	// idx--
	(s3 !< 0) ? pc := @loop1	// <loop1 end> 
	P3 P2 P0	// clean
	pc := P7 }	// RETURN =>  ** SUB END **
