
// MIDI_KEY_VEL_TX(0:key, 1:vel, 7:rtn | -) 
// transmit midi note on
// key and velocity s/b 7 bits!
// 6 cycles
@midi_key_vel_tx {	s2 :bu= mem[@midi_chan_ds]	// get chan ** MIDI_KEY_VEL_TX() START **
	P2 |= 0x90	// note_on|chan
	reg[`reg_midi] := P2	// wr(note_on|chan)
	reg[`reg_midi] := P0	// wr(key)
	reg[`reg_midi] := P1	// wr(vel)
	pc := P7 } 	// => RETURN


// MIDI_MUTE_TX(0:key, 7:rtn | -) 
// transmit MIDI note_off & all_notes_off & all_sound_off
// 10 +6 = 16 cycles max
@midi_mute_tx {	s1 := 0	// vel := 0  ** MIDI_MUTE_TX() START **
	s7 := pc := @midi_key_vel_tx	// <=> midi_key_vel_tx()
	s2 :bu= mem[@midi_chan_ds]	// get chan
	P2 |= 0xb0	// ctrl_chg|chan
	s3 := 0x7b	// c := all_notes_off
	s4 := 0	// v := 0
	reg[`reg_midi] := s2	// wr(ctrl_chg|chan)
	reg[`reg_midi] := s3	// wr(c)
	reg[`reg_midi] := s4	// wr(v)
	P3 := 0x78	// c := all_sound_off
	reg[`reg_midi] := P2	// wr(ctrl_chg|chan)
	reg[`reg_midi] := P3	// wr(c)
	reg[`reg_midi] := P4	// wr(v)
	pc := P7 }	// => RETURN  ** SUB END **


// MIDI_BEND_TX(1:bend, 7:rtn | -) 
// bend is 32 bit signed
// transmit midi pitch bend (14 bits)
// xmit LSB then MSB
// only xmit if change
// 11 cycles max
@midi_bend_tx {	P1 := nsb(s1)	// bend sgn => uns  ** MIDI_BEND_TX() START **
	P1 >>= 18	// 14 bits
	s0 :hu= mem[@old_ds]	// get old
	(s1 == P0) ? pc := @done	// (bend == old) ?
	mem[@old_ds] :h= s1 	// sto old
	s2 :bu= mem[@midi_chan_ds]	// get chan
	P2 |= 0xe0	// pitch_bend|chan
	reg[`reg_midi] := P2	// wr(pitch_bend|chan)
	s1 &= 0x7f	// bend[6:0] (cpy)
	reg[`reg_midi] := P1	// wr(bend[6:0])
	P1 >>= 7	// bend[13:7]
	reg[`reg_midi] := s1	// wr(bend[13:7])
@done	pc := P7, P1	// => RETURN
@old_ds {	mem[1] :h= ( 0 ) } }	// ** OLD_DS ** ** SUB END **


// MIDI_KFRAC_TX(1:frac, 7:rtn | -) 
// convert kfrac to bend[14] & tx
// if (bend ENC == 0) then tx 8192 (inv_uint(0) returns -1 which won't do it)
// note that bend << 8 gives 0.5 max
// 10 +11 = 22 cycles max
@midi_kfrac_tx {	s3 :bu= mem[@m_p2_ds+4]	// get bend ENC value  ** MIDI_KFRAC_TX() START **
	(P3 != 0) ? pc := @bend_nz	// (bend ENC != 0) ?
	P1 := 0 	// frac := 0
	pc := @bend_z	// => bend_z
@bend_nz	P1 := nsb(s1)	// frac uns => sgn
	s2 := mem[@m_p2_ds]	// get bend[0:127](inv)
	P2 <<= 8	// bend_fs
	P1 *xsu= P2	// frac_sgn * bend_fs
@bend_z	s7 := pc := @midi_bend_tx	// <=> midi_bend_tx()
	pc := P7 } 	// => RETURN  ** SUB END **


// MIDI_KDIF_TX(1:kdif, 7:rtn | -) 
// convert key difference to bend[14], tx
// kdif is signed 8.24
// note that bend << 8 gives 0.5 max fs
// 8 +11 = 19 cycles max
@midi_kdif_tx {	s2 := mem[@m_p2_ds]	// get bend[0:127](inv)  ** MIDI_KDIF_TX() START **
	P2 <<= 8	// bend_fs
	P1 *xsu= P2	// kdif * bend_fs
	P1 <<= 8	// fs
	s7 := pc := @midi_bend_tx	// <=> midi_bend_tx()
	pc := P7 } 	// => RETURN  ** SUB END **


// MIDI_CC_TX(7:rtn | -) 
// transmit midi control change
// 7 data bits if (cc < 0), else 14 bits
// if (cc == 0) just return
// volume axis modulation 48dB
// uses running status for 14 bits data to shave off 1 tx byte
// xmit MSB then LSB as per spec
// only xmit if change
// 29 cycles max
@midi_cc_tx {	s3 := mem[@m_p5_ds]	// get cc[-127:31]  ** MIDI_CC_TX() START **
	(s3 != 0) ? pc := @cc_nz	// (cc != 0) ?
	pc := P7, P3	// => RETURN
@cc_nz	s0 := mem[@v_pre_ds]	// get pre volume
	P0 := ~s0	// ~v_pre
	s1 := mem[@m_p6_ds]	// get cloc[0:63](inv_rev) (16.16)
	P1 >>= 14	// 
	P0 *u= P1	// ~v_pre * cloc
	P0 := lim(s0)	// lim
	P0 := ~s0	// ~fs
	P0 >>= 18	// data[13:0]
	s1 := s0 >> 7	// msb := data[13:7]
	s2 :hu= mem[@old_ds]	// get old
	s4 := sgn(s3)	// sgn(cc)
	(s4 !< 0) ? pc := @cc_nlz	// (sgn !< 0) ?
	P3 *s= s4	// |cc|
	P0 := s1	// data <= msb
@cc_nlz	(s0 == P2) ? pc := @done	// (data == old) ?
	mem[@old_ds] :h= s0 	// sto data
	s5 :bu= mem[@midi_chan_ds]	// get chan
	P5 |= 0xb0	// ctrl_chg|chan
	reg[`reg_midi] := P5	// wr(ctrl_chg|chan)
	reg[`reg_midi] := s3	// wr(cc)
	reg[`reg_midi] := s1	// wr(msb)
	(s4 < 0) ? pc := @done	// (sgn < 0) ?
	P3 += 0x20	// cc_lsb offset
	reg[`reg_midi] := s3	// wr(cc_lsb)
	P0 &= 0x7f	// lsb := data[6:0]
	reg[`reg_midi] := s0	// wr(lsb)
@done	P4 P3 P1 P0	// clean
	pc := P7	// => RETURN
@old_ds {	mem[1] :h= ( 0 ) } }	// ** OLD_DS ** ** SUB END **


// MIDI_KEY_KFRAC(7:rtn | 0:key, 1:kfrac) 
// return midi key[6:0] & kfrac[31:0] (both unsigned)
// D-Lev note max = A8.
// D-Lev plin[31:0] = 12 notes/oct * 32 oct = 384 notes total.
// MIDI key 117 = A8.
// 384 - 117 = 267, which we would subtract.
// + 1/2 key offset to center key & frac = 266.5.
// 266.5 * 1/(12 * 2^5) = 0xb1aa,aaaa
// have to order offsets to avoid underflow and such
// output key.kfrac range is [0.5:117.5]
// 15 cycles max
@midi_key_kfrac {	s0 := mem[@p_lin_ds]	// get p_lin  ** MIDI_KEY_KFRAC() START **
	s1 := mem[@m_p3_ds]	// get midi_oct[-7:7]
	s2 := mem[@b_p0_ds]	// get bank[-3:3]
	P1 +s= P2	// octs := midi_oct + bank
	P1 <<= 27	// octs << 27 (octave region of p_lin)
	s3 := 0xb1aaaaaa	// offs := 266.5 / (12 * 2^5)
	(s1 < 0) ? pc := @octs_lz	// (octs < 0) ?
	P3 -us= P1	// offs - octs (can't ofl or go neg)
	pc := @cont	// => cont
@octs_lz	P0 +us= P1	// p_lin + octs (can't ofl)
	P0 := lim(s0)	// lim
@cont	P0 -u= P3	// p_lin - [(offs - octs) or offs]
	P0 := lim(s0)	// pitch := lim
	s1 := s0 *u 384	// kfrac := pitch * (12 * 2^5)
	s4 := 384	// key := pitch *xu (12 * 2^5)
	P0 *xu= P4
	pc := P7 } 	// => RETURN  ** SUB END **


// MIDI_ACT(6:state, 7:rtn | 0:act, 6:state) 
// check volume threshold
// return 0 if inactive, else NZ
// if damp > 0 : use dloc for on=>off threshold
// if damp > 0 : don't allow off=>on below dloc threshold
// 10 +5 = 15 cycles max
@midi_act {	s0 :bu= mem[@e_p5_ds+4]	// get damp_enc[0:63]  ** MIDI_ACT() START **
	(s0 == 0) ? pc := @de_z	// (damp_enc == 0) ?
	P0 := mem[@v_damp_ds]	// get v_damp
	s1 := -1	// -1
	(s0 == P1) ? pc := @vd_neg1	// (v_damp == -1) ?
	P0 := 0	// act := 0
	pc := P7	// => RETURN
@vd_neg1	(s6 != 0) ? pc := @st_act	// (state != 0) ?
@de_z	P0 := mem[@v_pre_ds]	// get pre volume
	s1 := mem[@m_p1_ds]	// get vloc[0:63](fs)
	s7 := pc := @xk_mod	// <=> xk_mod()
@st_act	pc := P7 } 	// => RETURN


// MIDI_VEL(7:rtn | 1:vel) 
// calculate midi velocity
// (velo_ENC == 0)  ? vel := 64
// (velo_ENC == 31) ? vel := 127
// 13 cycles max
@midi_vel {	s1 :bu= mem[@m_p4_ds+4]	// get velo_ENC value  ** MIDI_VEL() START **
	(s1 != 0) ? pc := @enc_nz	// (ENC != 0) ? => continue
	P1 := 64	// vel := 64
	pc := P7 	// => RETURN
@enc_nz	s2 := 31
	(s1 <u P2) ? pc := @enc_ok	// (ENC < 31) ? => continue
	P1 := 127	// vel := 127
	pc := P7 	// => RETURN
@enc_ok	P1 := mem[@m_p4_ds]	// get velo[0:31](48db_dn)
	s2 := mem[@v_hpf_ds]	// get v_hpf
	P1 *xu= P2	// velo * v_hpf
	P1 <<= 11	// scale
	P1 := lim(s1)	// lim
	P1 >>= 25	// 7 bit!
	(s1 != 0) ? pc := @min_ok
	P1 := 1	// vel := 1
@min_ok	pc := P7 } 	// => RETURN


// MIDI_KDIF(0:key_i, 7:rtn | 1:kdif ) 
// key_i is old key (unsigned byte)
// kdif is new - old (signed 8.24)
// 8 +15 = 23 cycles max
@midi_kdif {	s7 := pc := @midi_key_kfrac	// <=> midi_key_kfrac()  ** MIDI_KDIF() START **
	P0 <<= 24	// key_new << 24
	P1 >>= 8	// kfrac_new >> 8
	P1 += P0	// new := key_new.kfrac_new (8.24)
	P0 := nsb(s0)	// set key_i msb (tricky! adds 1/2 lsb)
	P0 <<r= 24	// old := key_i + 1/2 (8.24)
	P1 -u= P0	// kdif := new - old
	pc := P7 } 	// => RETURN


// MIDI(7:rtn | -) 
// do midi tasks
// state machine spreads out real time over multiple IRQs
// associated data is transmitted in clumps
// see jump table for state descriptions
@midi {	s0 := mem[@m_p0_ds]	// get chan  ** MIDI() START **
	(s0 != 0) ? pc := @ch_nz	// (chan != 0) ? 
	pc := P7, P0	// => RETURN
// store chan
@ch_nz	s1 := sgn(s0)	// abs(chan)
	s0 *s= P1	// cpy
	P0--	// chan-- (stupid)
	mem[@midi_chan_ds] :b= P0	// sto abs(chan)
// check Out	
	s2 := mem[@v_p7_ds]	// get Out
	s3 :bu= mem[@out_ds]	// get out_ds
	mem[@out_ds] :b= s2	// sto out_ds
	(P2 != 0) ? pc := @out_ok	// (Out != 0) ? output enabled
	(P3 == 0) ? pc := @out_rtn	// (out_ds == 0) ? done
	s0 :bu= mem[@key_ds]	// get key
	s7 := pc := @midi_mute_tx	// <=> midi_mute_tx()
@out_rtn	pc := P7, P0	// => RETURN (pop chan)
// check busy
@out_ok	P3 := reg[`reg_midi]	// read midi reg (pop out_ds)
	(P3 !< 0) ? pc := @busy_ok	// (reg_midi !< 0) ? not busy
	(P0 !< 0) ? pc := @busy_rtn	// (chan !< 0) ? skip timer set
	s4 := 11	// timeout := 2ms
	mem[@midi_timer_ds] :b= P4	// set timer
@busy_rtn	pc := P7	// => RETURN
// check timer
@busy_ok	(P0 !< 0) ? pc := @timer_ok	// (chan !< 0) ? 
	s5 :bu= mem[@midi_timer_ds]	// get timer
	(P5 == 0) ? pc := @timer_ok	// (timer == 0) ? cont
	s5 :bu= mem[@midi_timer_ds]	// get timer
	P5--	// timer--
	mem[@midi_timer_ds] :b= P5	// sto timer
	pc := P7	// => RETURN
// jump to current state
@timer_ok	s6 :bu= mem[@state_ds]	// get state
	s6 *=2	// * 2 (cpy)
	P6 += @jmp_tbl	// + jmp_tbl addr
	s1 :hu= mem[P6]	// get jump addr
	pc := P1	// jump
@jmp_tbl	mem[1] :h= ( @0_off )	// act, vel
	mem[1] :h= ( @1_off_on )	// key, frac_bend_tx, note_tx (note on)
	mem[1] :h= ( @2_on )	// act, key_dif, key_bend_tx
	mem[1] :h= ( @3_on_off )	// note_tx (note off)
// state machine
@0_off	s7 := pc := @midi_act	// <=> midi_act()
	(P0 == 0) ? pc := @done	// (act == 0) ? stay here
	s7 := pc := @midi_vel	// <=> midi_vel()
	mem[@vel_ds] :b= P1	// sto vel
	pc := @done_inc	// => next

@1_off_on	s7 := pc := @midi_key_kfrac	// <=> midi_key_kfrac()
	mem[@key_ds] :b= s0	// sto key
	s7 := pc := @midi_kfrac_tx	// <=> midi_kfrac_tx()
	s1 :bu= mem[@vel_ds]	// get vel
	s7 := pc := @midi_key_vel_tx	// <=> midi_key_vel_tx()
	pc := @done_inc	// => next

@2_on	s7 := pc := @midi_act	// <=> midi_act()
	(s0 == 0) ? pc := @act_z	// (act == 0) ?
	P0 := 1	// act := 1
@act_z	mem[@act_ds] :b= s0	// sto act[0:1]
	(P0 == 0) ? pc := @done_inc	// (act == 0) ? next
	s4 :bu= mem[@m_p2_ds+4]	// get bend ENC value
	(P4 == 0) ? pc := @done	// (bend ENC == 0) ? stay here
	s0 :bu= mem[@key_ds]	// get key
	s7 := pc := @midi_kdif	// <=> midi_kdif()
	s2 := sgn(s1)	// |kdif|
	P2 *= s1	// 
	P2 >>= 24	//
	s4 :bu= mem[@m_p2_ds+4]	// get bend ENC value
	(P2 !<u P4) ? pc := @2_cont	// (|kdif| !< bend ENC) ? next
	s7 := pc := @midi_kdif_tx	// <=> midi_kdif_tx()
	pc := @done	// => stay here
@2_cont	P1	// clean dif
	pc := @done_inc	// => next

@3_on_off	s0 :bu= mem[@key_ds]	// get key
	s1 := 0	// vel := 0
	s7 := pc := @midi_key_vel_tx	// <=> midi_key_vel_tx()
	P6 :bu= mem[@act_ds]	// state := act[0:1] (tricky!)
	pc := @done_sto	// => done_sto
// returns & cc tx
@done_inc	P6++	// inc state
@done_sto	mem[@state_ds] :b= s6	// sto state
@done	s7 := pc := @midi_cc_tx	// <=> midi_cc_tx()
	pc := P7, P6	// => RETURN 
// internal data stores
@key_ds {	mem[1] :b= ( 0 ) }	// ** KEY_DS **
@vel_ds {	mem[1] :b= ( 0 ) }	// ** VEL_DS **
@act_ds {	mem[1] :b= ( 0 ) }	// ** ACT_DS **
@out_ds {	mem[1] :b= ( 0 ) }	// ** OUT_DS **
@state_ds {	mem[1] :b= ( 0 ) } }	// ** STATE_DS ** ** SUB END **

// external data stores
@midi_chan_ds {	mem[1] :b= ( 0 ) }	// ** MIDI_CHAN_DS **
@midi_timer_ds {	mem[1] :b= ( 0 ) }	// ** MIDI_TIMER_DS **
