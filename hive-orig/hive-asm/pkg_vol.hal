// VOL_HPF(0:v_in, 7:rtn | 0:v_in) 
// velocity hpf
// unsigned I/O
// range limited to [-48:0] dB
@vol_hpf {	s1 := 0xc0000000	// 3/4 fs (-48dB) ** VOL_HPF() START **
	s0 -u= P1	// v_in - 3/4 (cpy)
	P0 := lim(s0)	// lim
	s2 := 0xab92a6	// rise := 20Hz
	s1 := s2 *u 4	// fall := 80Hz
	s6 := @lp	// lp addr
	s7 := pc := @hp1_ubi	// <=> hp1_ubi()
	mem[@v_hpf_ds] := P0	// sto hp
	pc := P7	// RETURN =>
@lp	mem[1] := ( 0 ) }	// lp   ** SUB END **
@v_hpf_ds {	mem[1] := ( 0 ) }	// ** V_HPF_DS **


// VOL_DROP(0:v_in, 4:Drop, 7:rtn | 0:v_out) 
// crossfades linear and flipped squared responses
// pivots about -12dB (192dB/16 = 12dB, hence the *16)
@vol_drop {	s1 := ~s0	// ~v_in  ** V_DROP() START **
	P1 *xu= s1	// ~v_in^2
	P1 *u= 16	// ~v_in^2 * 16
	P1 := lim(s1)	// lim
	P1 := ~s1	// ~(~v_in^2 * 16)
	P1 *xu= s4	// Drop * ~(~v_in^2 * 16)
	P4 := ~s4	// ~Drop
	P0 *xu= P4	// v_in * ~Drop
	P0 +u= P1	// (v_in * ~Drop) + (Drop * ~(~v_in^2 * 16))
	pc := P7 }	// RETURN =>  ** SUB END **


// VOL_VEL(0:v_in, 5:velo, 7:rtn | 0:v_vel) 
// volume velocity
// unsigned I/O
@vol_vel {
	s3 := mem[@v_hpf_ds]	// get hp
	P5 >>= 23	// velo >> 23
	P3 *su= P5	// hp * (velo >> 23)
	P3 := sat(s3)	// sat
	P0 +us= P3	// in + hp * (velo >> 23)
	P0 := lim(s0)	// lim
	pc := P7 }	// RETURN =>  ** SUB END **

	
// VOL_KNEE(0:v_in, 1:kloc, 4:knee, 7:rtn | 0:v_out) 
// envelope knee with variable threshold and slope
// applies downward slope to envelope below the threshold
// (v_in < kloc) ? v_out := kloc - (knee * (kloc - v_in))
// else v_out := v_in
// knee dynamic range expansion via -3/4 (~5 bits => ~7 bits)
// unsigned I/O
@vol_knee {	P1 |= 0x3	// kloc | 0x3  ** VOL_KNEE() START **
	P1 >>r= 2	// kloc[0:1) => kloc[3/4:1) (-48dB to 0dB)
	(s0 <u s1) ? pc := @lt_kloc	// (v_in < kloc) ?
	P4 P1	// clean
	pc := P7	// => RETURN
@lt_kloc	s1 -u= P0	// kloc - v_in (cpy)
	P1 := lim(s1)	// lim
	s6 := 0xc000	// 3/4 (16.16 format, expand dynamic range)
	P4 -= P6	// knee - 3/4
	s4 >>>= 14	// knee >>> 14 (cpy)
	s1 *u= P4	// int := (kloc - v_in) * (knee >>> 14) (cpy)
	s5 := lim(P1)	// lim
	P4 <<= 18	// knee << 18
	P1 *xu= P4	// frac := (kloc - v_in) * (knee << 18)
	P5 +u= P1	// tot := int + frac
	P5 := lim(s5)	// lim
	P1 -u= P5	// kloc - tot
	s0 := lim(P1)	// v_out := lim(kloc - tot) (mov)
	pc := P7 }	// RETURN =>  ** SUB END **


// VOL_DAMP(0:v_in, 1:dloc, 2:damp, 7:rtn | 0:v_in) 
// volume switch of global damping
// unsigned I/O
@vol_damp {	s0 := s0	// cpy  ** VOL_DAMP() START **
	s7 := pc := @xk_mod	// <=> xk_mod()
	(P0 == 0) ? pc := @damp	// (xk_mod == 0) ?
	P2 := -1	// damp disable
@damp	mem[@v_damp_ds] := P2	// sto v_damp
	pc := P7 }	// RETURN =>  ** SUB END **
@v_damp_ds {	mem[1] := ( 0 ) }	// ** V_DAMP_DS **

	
// ENV_AD(0:in, 1:fall, 2:rise, 7:rtn | 0:out) 
// linear attack & decay envelope generator w/ peak hold
// follow / hold input if peak less than in or accum
// (in >= peak)    ? peak := in (peak hold)
// (accum >= peak) ? peak := in (follow in)
// unsigned I/O
@env_ad {	s3 := mem[@peak]	// get peak  ** ENV_AD() START **
	(s0 <u s3) ? pc := @in_lt_pk	// (in < peak) ? skip sto
	mem[@peak] := s0	// peak := in (sto, peak hold)
@in_lt_pk	s4 := mem[@accum]	// get accum
	(P4 <u P3) ? pc := @ac_lt_pk	// (accum < peak) ? skip sto
	mem[@peak] := s0	// peak := in (sto, follow input)
@ac_lt_pk	P0 := mem[@peak]	// get peak
	s6 := @accum	// addr
	s7 := pc := @slim_ubi	// <=> slim_ubi()
	pc := P7	// RETURN =>
@peak	mem[1] := ( 0 ) 	// peak
@accum	mem[1] := ( 0 ) }	// accum   ** SUB END **


// VOL_CVOL(0:v_in\p_lin, 1:cvol, 7:rtn | 0:v_out) 
// reduce volume at note boundaries
@vol_cvol {	s7 := pc := @pitch_cntr	// <=> pitch_cntr()  ** VOL_CVOL() START **
	P0 *xu= P0	// cntr^2
	P1 *xu= P0	// cvol * cntr^2
	P0 -u= P1	// v_in - (cvol * cntr^2)
	P0 := lim(s0)	// lim
	pc := P7 }	// RETURN =>  ** SUB END **
