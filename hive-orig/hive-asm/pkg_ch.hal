
// CH_TO_DEC(0:ch, 7:rtn | 0:flag/out) 
// convert ASCII input range [0x30:0x39] to INT [0:9], else unchanged 
// return flag: -1=error; 0=ok 
@ch_to_dec {	s1 := '0'	// ** CH_TO_DEC() START **
	(s0 <u P1) ? pc := @no	// chk
	s1 := ':'
	(s0 !<u P1) ? pc := @no	// chk
	P0 -= '0'	// int offset
	s0 := 0	// int flag
	pc := P7	// => RETURN
@no	s0 := -1	// error flag
	pc := P7 }	// RETURN =>  ** SUB END **

	
// CH_TO_HEX(0:ch, 7:rtn | 0:flag/out) 
// convert ASCII input range [0x30:0x39],[0x61:0x66] to HEX [0:15], else unchanged 
// return flag: -1=error; 0=ok 
@ch_to_hex {	s1 := '0'	// ** CH_TO_HEX() START **
	(s0 <u P1) ? pc := @no	// chk
	s1 := ':'
	(s0 <u P1) ? pc := @num	// chk
	s1 := 'a'
	(s0 <u P1) ? pc := @no	// chk
	s1 := 'g'
	(s0 <u P1) ? pc := @alpha	// chk
@no	s0 := -1	// error flag
	pc := P7	// => RETURN
@alpha	P0 -= 0x27	// alpha-int offset
@num	P0 -= '0'	// int offset
	s0 := 0	// ok flag
	pc := P7 }	// RETURN =>  ** SUB END **

	
// HEX_TO_CH(0:hex, 7:rtn | 0:ch) 
// convert HEX [0:15] to ASCII range [0x30:0x39],[0x61:0x66]
@hex_to_ch {	s1 := 10	// ** HEX_TO_CH() START **  chk
	(s0 <u P1) ? pc := @num	// (ch < 10) ?
	P0 += 0x27	// [a:f] offset
@num	P0 += '0'	// [0:9] offset
	pc := P7 }	// RETURN =>  ** SUB END **

