//////////////////////////////////////////////////////
// THD 0 : Pitch axis processing & pitch correction //
//////////////////////////////////////////////////////
@xsr_0 {	s0 := reg[`reg_pitch]	// get pitch number  ** XSR 0 START **
// S_P2 (P<>V)
	s4 := mem[@s_p2_ds]	// get P<>V[0:3]
	P4 &= 1	// isolate bit[0]
	(P4 == 0) ? pc := @nswp	// (P<>V[0] == 0) ?
	P0 := reg[`reg_volume]	// get volume number
// S_P0 (50HZ)
@nswp	s4 := mem[@s_p0_ds]	// get 50HZ[0:1] 
	s1 := mem[@p_trk_ds]	// get p_trk
	s6 := @p_hum_filt_ds	// p_hum_filt_ds addr
	s7 := pc := @hum_filt	// <=> hum_filt()
	mem[@p_flt_ds] := s0	// sto p_flt (for ACAL)
// P0 (Pcal)
	s5 := mem[@p_p0_ds]	// get Pcal[-127:127](fs_sq)
	P5 >>>= 6	// scale Pcal
	s4 := mem[@p_nul_ds]	// get p_nul
	P4 +us= P5	// p_nul + Pcal
	P4 := lim(s4)	// lim(p_nul + Pcal)
	P4 -u= P0	// lim(p_nul + Pcal) - p_flt
	s0 := lim(P4)	// lim(lim(p_nul + Pcal) - p_flt)
@nz	s7 := pc := @ufrac_to_f	// <=> ufrac_to_f()
// P1 (Lin)
	s4 := mem[@p_p1_ds]	// get Lin[-15:15]
	P4 +s= 32	// offset
	P4 <<= 25	// scale 1/4 +/- 1/8
	s7 := pc := @ufrac_to_f_hi	// <=> ufrac_to_f_hi()
	P6 *s= -1	// neg
	s7 := pc := @pow_f_lq	// <=> pow_f_lq()
// P2 (Ofs-)
	s4 := mem[@p_p2_ds]	// get Ofs-[0:127](fs)
	s7 := pc := @ufrac_to_f_hi	// <=> ufrac_to_f_hi()
	P5 +s= 4	// exp + 4 (U4.3)
	P6 *s= -1 	// -sgn  
	s7 := pc := @add_f	// <=> add_f()
// P3 (Sens)
	s4 := mem[@p_p3_ds]	// get Sens[-127:127](fs_sq)
	s7 := pc := @frac_to_f_hi	// <=> frac_to_f_hi()
	P5 -s= 2	// scale 1/4
	P6 *s= -1	// reverse sense
	s0 := s0	// mag (cpy, lft := mag)
	s1 -s= 3	// exp - 3 (cpy)
	s2 *s= s6	// sgn * sgn (cpy)
	s7 := pc := @f_to_ufrac	// <=> f_to_ufrac()
// P6 (Lift)
	s3 := mem[@p_p6_ds]	// get Lift[0:31](fs)
	P0 *xu= s0	// lft^2
	P3 *xu= P0	// Lift * lft^2
	s7 := pc := @mul_f	// <=> mul_f()
// P4 (Ofs+)
	s4 := mem[@p_p4_ds]	// get Ofs+[0:127](fs)
	P4 |= 1	// set lsb (1/4)
	P4 >>r= 2	// scale 1/4 ([1/4:1/2])
// B_P0 (bank)
	s5 := mem[@b_p0_ds]	// get bank[-3:3]
	P5 <<<= 26	// scale 5.27/2 (+/-1/4)
	P4 +us= P5	// combine ([0:3/4])
	s7 := pc := @ufrac_to_f_hi	// <=> ufrac_to_f_hi()
	P5 +s= 1	// exp + 1 ([0:3/2])
	s7 := pc := @add_f	// <=> add_f()
	s7 := pc := @f_to_ufrac	// <=> f_to_ufrac()
	P0 +u= P3	// p + (Lift * lft^2)
	P0 := lim(s0)	// lim
	mem[@p_raw_ds] := s0	// sto p_raw (retain for PC below)
//////////////////////
// Pitch correction //
//////////////////////
	s1 := mem[@pc_mod_ds] 	// get pc_mod
// P0 (cmod), P3 (corr), P2 (span)
	s2 := mem[@pc_p0_ds]	// get cmod[0:31](fs)
	s3 := mem[@pc_p3_ds]	// get corr[0:31](fs)
	s4 := mem[@pc_p2_ds]	// get span[0:31](inv_rev)
	s7 := pc := @pitch_corr	// <=> pitch_corr()
	mem[@p_post_ds] := s0	// sto p_post
// P_P5 (cent)
	s1 := mem[@p_p5_ds]	// get Cent[-99:99]
	s7 := pc := @pitch_cent	// <=> pitch_cent()
	mem[@p_lin_ds] := s0	// sto p_lin
	s7 := pc := @exp2_uint_lq	// <=> exp2_uint_lq()
	mem[@p_exp_ds] := P0 	// sto p_exp
///////////////////
// Tracking Freq //
///////////////////
	s0 := mem[@p_raw_ds]	// get p_raw
	s7 := pc := @pitch_track	// <=> pitch_track()
	mem[@p_trk_ds] := P0 	// sto p_trk
	pc :i= P7 }	// => IRETURN  ** XSR END **
////////////////
// data store //
////////////////
@p_hum_filt_ds {	mem[16] := ( 0 ) }	// ** P_HUM_F_DS **
@p_flt_ds {	mem[1] := ( 0 ) }	// ** P_FLT_DS **
@p_nul_ds {	mem[1] := ( 0 ) }	// ** P_NUL_DS **
@p_raw_ds {	mem[1] := ( 0 ) }	// ** P_RAW_DS **
@p_post_ds {	mem[1] := ( 0 ) }	// ** P_POST_DS **
@p_lin_ds {	mem[1] := ( 0 ) }	// ** P_LIN_DS **
@p_exp_ds {	mem[1] := ( 0 ) }	// ** P_EXP_DS **
@p_trk_ds {	mem[1] := ( 0 ) }	// ** P_TRK_DS **
