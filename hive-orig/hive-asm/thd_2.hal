//////////////////////////////////////////////////
// THD 2 : Tuner & LCD & Pitch Preview & PV MOD //
//////////////////////////////////////////////////
@xsr_2 {	s0 := mem[@p_raw_ds]	// get raw pitch  ** XSR 2 START **
	s6 := mem[@v_pre_ds]	// get pre volume
// P2 (Post)
	s1 := mem[@t_p2_ds]	// get Post[0:3]
	s1 &= 1	// bit 0
	(P1 == 0) ? pc := @n_ppost	// (bit == 0) ?
	P0 := mem[@p_post_ds]	// get post pitch
@n_ppost	P1 &= 2	// bit 1
	(P1 == 0) ? pc := @n_vpost	// (bit == 0) ?
	P6 := mem[@v_lin_ds]	// get linear volume
// P3 (Note), P4 (Oct)
@n_vpost	s2 := mem[@t_p3_ds]	// get Note[-11:11]
	s3 := mem[@t_p4_ds]	// get Oct[-15:15]
	s7 := pc := @tuner_offs	// <=> @tuner_offs()
// V_P7 (Out), P1 (Qant), P0 (Brit)
	s2 := mem[@v_p7_ds] 	// get Out[0:1]
	s4 := mem[@t_p1_ds]	// get Qant[0:4]
	s5 := mem[@t_p0_ds]	// get Brit[0:31]
	P5 <<= 3	// Brit << 3
	s7 := pc := @tuner	// <=> tuner()
/////////
// LCD //
/////////
// S_P5 (LCD)
	s0 := mem[@s_p5_ds]	// get LCD[0:31](fs)
	s7 := pc := @lcd_pwm	// <=> lcd_pwm()
	P0 <<= 1	// bklt << 1
// V_P7 (Out)
	s2 := mem[@v_p7_ds] 	// get Out[0:1]
	P2 ^= 1	// mute := ~Out
	P0 |= P2	// bklt | mute
	reg[`reg_io] := P0	// write gpio_o
//////////
// INIT //
//////////
	s0 :hu= mem[@pre_init_ds]	// get pre_init
	(P0 == 0) ? pc := @fz	// (init == 0) ?
	s4 := @pp_osc_ds	// start addr
	s5 := @pp_out_ds	// end addr
	s7 := pc := @init_mem	// <=> init_mem()
	pc :i= P7	// => IRETURN
///////////////////
// Pitch Preview //
///////////////////
@fz	s0 := mem[@p_exp_ds]	// get exponential pitch
// P4 (mode)
	s4 := mem[@pp_p4_ds]	// get mode[0:11]
	s5 := 4
	(s4 <u P5) ? pc := @prvw_lt4	// (mode < 4) ?
	P0 := mem[@p_raw_ds]	// get raw pitch (lin)
	s5 := 8
	(s4 <u P5) ? pc := @prvw_lt8	// (mode < 8) ?
	s7 := pc := @pitch_quant	// <=> pitch_quant()
// P_P5 (cent)
@prvw_lt8	s1 := mem[@p_p5_ds]	// get cent[-127:127]
	s7 := pc := @pitch_cent	// <=> pitch_cent()
	s7 := pc := @exp2_uint_lq	// <=> exp2_uint_lq()
// P2 (oct), O_P2 (oct)
@prvw_lt4	s1 := mem[@pp_p2_ds]	// get oct[-7:7]
	s2 := mem[@o_p5_ds]	// get oct[-7:7]
	P1 += P2	// combine
	s7 := pc := @inc_oct	// <=> inc_oct()
// P1 (harm)
	s2 := mem[@pp_p1_ds]	// get harm[-31:31](fs)
	s6 := @pp_osc_ds	// get addr
	s7 := pc := @osc_pp	// <=> osc_pp()
// P6 (vmod), P3 (pmod)
	s3 := mem[@pp_p6_ds]	// get vmod[-63:63](fs_sq)
	s3 := mem[@pp_p3_ds]	// get pmod[-63:63](fs_sq)
	s7 := pc := @pp_levl_mod	// <=> pp_levl_mod()
// P0 (prev)
	P4 := mem[@pp_p0_ds]	// get prev[0:63](48db_dn) (pop mode)
	P0 *xsu= P4	// osc_pp * prev
// P5 (tone)
	s2 := mem[@pp_p5_ds]	// get tone[-31:31](fs)
	s2 := s2	// copy
// treble
	s6 := @pp_treb_ds	// addr
	s7 := pc := @eq_treb	// <=> eq_treb()
// bass
	s6 := @pp_bass_ds	// addr
	s7 := pc := @eq_bass	// <=> eq_bass()
	mem[@pp_out_ds] := P0 	// sto preview
////////////
// PV MOD //
////////////
// P MOD
	s0 := mem[@p_lin_ds]	// get linear pitch
	s7 := pc := @xm_mod	// <=> xm_mod()
	mem[@pm_mod_ds] := P0 	// sto pm_mod
// V MOD
	s0 := mem[@v_lin_ds]	// get linear volume
	s0 := s0	// cpy
	s7 := pc := @xl_mod	// <=> xl_mod()
	mem[@vl_mod_ds] := P0 	// sto vl_mod
	s7 := pc := @xh_mod	// <=> xh_mod()
	mem[@vh_mod_ds] := P0 	// sto vh_mod
/////////////////
// PC RATE MOD //
/////////////////
// P1 (rate), P4 (vmod)
	s1 := mem[@pc_p1_ds]	// get rate[0:31](fs)
	s3 := mem[@pc_p4_ds]	// get vmod[-31:31](fs_sq)
	s7 := pc := @pc_rate_mod	// <=> pc_rate_mod()
	mem[@pc_mod_ds] := P1 	// sto pc_mod
	pc :i= P7 }	// => IRETURN  ** XSR END **
////////////////
// data store //
////////////////
@pm_mod_ds {	mem[1] := ( 0 ) }	// ** PM_MOD_DS **
@vl_mod_ds {	mem[1] := ( 0 ) }	// ** VL_MOD_DS **
@vh_mod_ds {	mem[1] := ( 0 ) }	// ** VH_MOD_DS **
@pc_mod_ds {	mem[1] := ( 0 ) }	// ** PC_MOD_DS **
// KEEP THESE SEQUENTIAL!
@pp_osc_ds {	mem[4] := ( 0 ) }	// ** PP_OSC_DS **
@pp_treb_ds {	mem[2] := ( 0 ) }	// ** PP_TREB_DS **
@pp_bass_ds {	mem[2] := ( 0 ) }	// ** PP_BASS_DS **
@pp_out_ds {	mem[1] := ( 0 ) }	// ** PP_OUT_DS **
