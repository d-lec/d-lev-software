/*
Important things not covered very well (if at all) in the 25LC1024 datasheet:
- Max operating frequency @ 3.3V is unspecified, use 10MHz (max for 2.5V)
- You MUST issue a WREN before ALL writes, including to the WRSR reg!
- You MUST either wait or check RDSR[0] (WIP) after ALL writes, including to the WRSR reg!
- You MUST raise CSn at the end of ALL writes, including to regs, for them to take.
- You SHOULD raise CSn at the end of ALL reads, including to regs, for safety.
*/

// SPI_RD(7:rtn | 0:rd_data) 
// stay until read data is valid
@spi_rd {	s0 := 0	// dummy wr data  ** SPI_RD() START ** 
	reg[`reg_spi] := s0	// write
@loop	P0 := reg[`reg_spi]	// <loop start> read
	(s0 < 0) ? pc := @loop	// <loop end> chk busy
	pc := P7 }	// => RETURN  ** SUB END **


// SPI_WR(0:wr_data, 7:rtn | -) 
// write byte data
// stay until write data is taken
@spi_wr {	reg[`reg_spi] := s0	// write  ** SPI_WR() START **
@loop	P0 := reg[`reg_spi]	// <loop start> read
	(s0 < 0) ? pc := @loop	// <loop end> chk busy
	pc := P7, P0 }	// => RETURN  ** SUB END **


// SPI_W32(0:wr_data, 7:rtn | -) 
// write 32 bit data - little endian!
// before use:
// issue spi_wr_en() before this
// issue spi write commmand before this (0x02 & 3*addr bytes)
@spi_w32 {	s4 := 3	// loop idx  ** SPI_W32() START **
@loop	s0 &= 0xff	// <loop start> mask LSB (cpy)
	s7 := pc := @spi_wr	// <=> spi_wr()
	P0 >>= 8	// next byte
	P4--	// idx--
	(s4 !< 0) ? pc := @loop	// <loop end> chk idx
	P4 P0	// clean
	pc := P7 }	// => RETURN  ** SUB END **


// SPI_R32(7:rtn | 0:rd_data) 
// read 32 bit data - little endian!
// issue a SPI read commmand before this (0x03 & 3*addr bytes)
@spi_r32 {	s4 := 3	// loop idx  ** SPI_R32() START **
	s1 := 0	// empty 32 bits
@loop	s7 := pc := @spi_rd	// <=> spi_rd()
	P1 >>r= 8	// next byte location
	P1 |= P0	// or byte
	P4--	// idx--
	(s4 !< 0) ? pc := @loop	// <loop end> chk idx
	s0 := P1 <<r 24	// roate back
	pc := P7, P4 }	// => RETURN  ** SUB END **


// SPI_CSN_HI(7:rtn | -) 
// de-assert chip select:
// - terminates reads and writes
// - places the EEPROM in safer state
@spi_csn_hi {	s0 := 0x100	// spi cs de-assert  ** SPI_CSN_HI() START **
	s7 := pc := @spi_wr	// <=> spi_wr()
	pc := P7 }	// => RETURN  ** SUB END **


// SPI_WR_EN(7:rtn | -) 
// enable writes to spi data AND regs!
// sets the EEPROM internal write enable latch
// latch is reset after write of byte data, page data, or status reg (write protect reg)
// assumes CSn is high @ start
@spi_wr_en {	s0 := 0x06	// WREN (write enable reg)  ** SPI_WR_EN() START **
	s7 := pc := @spi_wr	// <=> spi_wr()
	s7 := pc := @spi_csn_hi	// <=> spi_csn_hi()
	pc := P7 }	// => RETURN  ** SUB END **


// SPI_WR_WAIT(7:rtn | -) 
// wait until SPI write operation is done
// read RDSR WIP (write in progress) bit[0] in SPI reg[5], return when zero
// note: sets CSn high @ start!
@spi_wr_wait {	s7 := pc := @spi_csn_hi	// <=> spi_csn_hi()  ** SPI_WR_WAIT() START **
@loop	s0 := 0x05	// <loop start> RDSR (read status reg)
	s7 := pc := @spi_wr	// <=> spi_wr()
	s7 := pc := @spi_rd	// <=> spi_rd()
	s7 := pc := @spi_csn_hi	// <=> spi_csn_hi()
	P0 &= 1	// mask lsb (WIP bit)
	(P0 != 0) ? pc := @loop	// <loop end> (WIP != 0) stay 
	pc := P7 }	// => RETURN  ** SUB END **


// SPI_WR_PROT(0:prot, 7:rtn | -) 
// set / clear write protect bits
// WRSR reg:
// [7] : WPEN (0 to disable WPn pin #3)
// [3] : BP1
// [2] : BP0
// wr_data := prot[1:0] << 2
// prot  BP1  BP0  protected          unprotected   result
// ----  ---  ---  ---------          -----------   ------
// 0     0    0    n/a                [0:0x1FFFF]   EEPROM unprotected 
// 2     1    0    [0x10000:0x1FFFF]  [0x0:0xFFFF]  SW protected, presets unprotected
// 3     1    1    [0:0x1FFFF]        n/a           EEPROM protected
// assumes CSn is high @ start
@spi_wr_prot {	s7 := pc := @spi_wr_en	// <=> spi_wr_en()  ** SPI_WR_PROT() START **
	s0 := 0x1	// WRSR (write status reg)
	s7 := pc := @spi_wr	// <=> spi_wr()
	P0 &= 3	// mask prot[1:0]
	P0 <<= 2	// prot[1:0] << 2
	s7 := pc := @spi_wr	// <=> spi_wr()
	s7 := pc := @spi_wr_wait	// <=> spi_wr_wait()
	pc := P7 }	// => RETURN  ** SUB END **


// CRC_32(0:data_i | 1:data_o) 
// do CRC32 operations 
// I/O is 32 bit chunks 
// 1. Logical NOT first input chunk and call routine to produce first output chunk. 
// 2. XOR next input chunk with previous output chunk and call routine to produce next output chunk, etc. 
// 3. Logical NOT final output chunk to obtain CRC32. 
// 4. Call routine one last time (with CRC32 as input) to get final output chunk. 
// Passing output message through steps 1 & 2 should produce final output chunk 0xdebb20e3
// 132/100 cycles max/min
@crc_32 {	s1 := 0x6db88320	// crc poly  ** CRC_32() START **
	s2 := 31	// loop idx
@loop	P0 >>r= 1	// <loop start> rotate right 1
	(s0 !< 0) ? pc:= @nlz	// check MSb
	P0 ^= s1	// xor w/ poly if MSb is set
@nlz	P2--	// idx--
	(s2 !< 0) ? pc := @loop	// <loop end>
	P1 := P0	// move crc
	pc := P7, P2 }	// => RETURN  ** SUB END **

	
// SPI_CRC32(0:addr, 7:rtn | 0:crc32) 
// calculate crc32 of load given address
// return 0xdebb20e3 on success
// assumes CSn is high @ start
@spi_crc32 {	P0 := swp(s0)	// addr big <=> little  ** SPI_CRC32() START **
	P0 |= 0x3	// addr | 0x3 (spi rd)
	s7 := pc := @spi_w32	// <=> spi_w32()
	s7 := pc := @spi_r32	// <=> spi_r32() (read len)
	s1 := -1	// init crc
	s3 := s0 - 4	// init len (-crc)
@loop	P0 ^= P1	// <loop start> data ^ crc
	s7 := pc := @crc_32	// <=> crc_32()
	P3 -= 4	// len -= 4
	s7 := pc := @spi_r32	// <=> spi_r32() (get data)
	(s3 !< 0) ? pc := @loop	// <loop end> chk idx
	s7 := pc := @spi_csn_hi	// <=> spi_csn_hi()
	P0 := P1	// move crc
	pc := P7, P3 }	// => RETURN  ** SUB END **

	
// SPI_VER(0:addr, 7:rtn | 0:ver) 
// read version (CRC32) of load given address
// assumes CSn is high @ start
@spi_ver {	s1 := 0x03000000	// addr MSB := 0x03 (spi rd)  ** SPI_VER() START **
	P1 |= P0	// 0x03000000 | addr
	s0 := swp(s1)	// big <=> little
	s7 := pc := @spi_w32	// <=> spi_w32()
	s7 := pc := @spi_r32	// <=> spi_r32() (read len)
	s7 := pc := @spi_csn_hi	// <=> spi_csn_hi()
	P1 +u= P0	// addr + len
	P1 -u= 4	// (addr + len) - 4
	s0 := swp(P1)	// big <=> little
	s7 := pc := @spi_w32	// <=> spi_w32()
	s7 := pc := @spi_r32	// <=> spi_r32() (read CRC32)
	s7 := pc := @spi_csn_hi	// <=> spi_csn_hi()
	pc := P7 }	// => RETURN  ** SUB END **

