// F_WR(0:mag_i, 1:exp_i, 2:sgn_i, 3:addr, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// write float to mem
// 4 cycles max/min
@f_wr {	mem[s3] := s0	// ** F_WR() START **  mag_i wr
	mem[s3+4] :h= s1	// exp_i wr
	mem[P3+6] :b= s2	// sgn_i wr
	pc := P7 }	// RETURN =>  ** SUB END **
	
// F_WR_HI(3:addr, 4:mag_i, 5:exp_i, 6:sgn_i, 7:rtn | 4:mag_o, 5:exp_o, 6:sgn_o) 
// write float to mem
// 4 cycles max/min
@f_wr_hi {	mem[s3] := s4	// ** F_WR_HI() START **  mag_i wr
	mem[s3+4] :h= s5	// exp_i wr
	mem[P3+6] :b= s6	// sgn_i wr
	pc := P7 }	// RETURN =>  ** SUB END **

	
// F_RD(3:addr, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// read float from mem
// 4 cycles max/min
@f_rd {	s0 := mem[s3]	// ** F_RD() START **  mag_i rd
	s1 :hs= mem[s3+4]	// exp_i rd
	s2 :bu= mem[P3+6]	// sgn_i rd
	pc := P7 }	// RETURN =>  ** SUB END **

// F_RD_HI(3:addr, 7:rtn | 4:mag_o, 5:exp_o, 6:sgn_o) 
// read float from mem
// 4 cycles max/min
@f_rd_hi {	s4 := mem[s3]	// ** F_RD_HI() START **  mag_i rd
	s5 :hs= mem[s3+4]	// exp_i rd
	s6 :bu= mem[P3+6]	// sgn_i rd
	pc := P7 }	// RETURN =>  ** SUB END **

	
// UFRAC_TO_F(0:ufrac_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// convert unsigned frac to float 
// 6/4 cycles max/min
@ufrac_to_f {	s2 := 1	// ** UFRAC_TO_F() START **  sgn_o := 1
	(s0 != 0) ? pc := @nz	// ufrac_i zero chk
	s1 := -0x8000	// exp_o := min
	pc := P7	// RETURN =>
@nz	s1 := lzc(s0)	// lzc
	P0 <<= s1	// mag_o norm
	P1 *= -1	// exp_o := -lzc
	pc := P7 }	// RETURN =>  ** SUB END **
	
// UFRAC_TO_F_HI(4:frac_i, 7:rtn | 4:mag_o, 5:exp_o, 6:sgn_o) 
// convert unsigned frac to float high
// 6/4 cycles max/min
@ufrac_to_f_hi {	s6 := 1	// ** UFRAC_TO_F_HI() START **  sgn_o := 1
	(s4 != 0) ? pc := @nz	// ufrac_i zero chk
	s5 := -0x8000	// exp_o := min
	pc := P7	// RETURN =>
@nz	s5 := lzc(s4)	// lzc
	P4 <<= s5	// mag_o norm
	P5 *= -1	// exp_o := -lzc
	pc := P7 }	// RETURN =>  ** SUB END **
	
// F_TO_UFRAC(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:ufrac_o) 
// convert float to unsigned frac
// 5/3 cycles max/min 
@f_to_ufrac {	(P2 !< 0) ? pc := @nneg	// ** F_TO_UFRAC() START **  chk sgn_i
	P0 := 0	// uint_o := 0
	pc := P7, P1	// RETURN =>
@nneg	s1--	// exp_i-- (so 0 => -1)
	(P1 < 0) ? pc := @nofl	// (exp_i-- < 0) ? no ofl
	P0 := -1	// uint_o := max
	pc := P7, P1	// RETURN =>
@nofl	P0 <<= P1	// mag_i denorm
	pc := P7 }	// RETURN =>  ** SUB END **

// FRAC_TO_F(0:frac_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// convert signed frac to float 
// 7/4 cycles max/min 
@frac_to_f {	s2 := sgn(s0)	// ** FRAC_TO_F() START **  sgn_o := sgn(frac_i) 
	(s0 != 0) ? pc := @nz	// frac_i zero chk
	s1 := -0x8000	// exp_o := min
	pc := P7	// RETURN =>
@nz	P0 *= s2	// mag_o := abs(frac_i)
	s1 := lzc(s0)	// lzc
	P0 <<= s1	// mag_o norm
	P1 *= -1	// exp_o := -lzc
	pc := P7 }	// RETURN =>  ** SUB END **
	
// FRAC_TO_F_HI(4:frac_i, 7:rtn | 4:mag_o, 5:exp_o, 6:sgn_o) 
// convert signed frac to float 
// 7/4 cycles max/min 
@frac_to_f_hi {	s6 := sgn(s4)	// ** FRAC_TO_F() START **  sgn_o := sgn(frac_i) 
	(s4 != 0) ? pc := @nz	// frac_i zero chk
	s5 := -0x8000	// exp_o := min
	pc := P7	// RETURN =>
@nz	P4 *= s6	// mag_o := abs(frac_i)
	s5 := lzc(s4)	// lzc
	P4 <<= s5	// mag_o norm
	P5 *= -1	// exp_o := -lzc
	pc := P7 }	// RETURN =>  ** SUB END **
	
// F_TO_FRAC(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:frac_o) 
// convert float to signed frac
// ?/6 cycles max/min 
@f_to_frac {	P0 <<= s1	// ** F_TO_FRAC() START **  mag_i denorm
	P0 *= s2	// mag_i sign
	(s1 < 0) ? pc := @lz	// (exp_i < 0) ? ok
	P0 := 1 << 31	// frac_o := min
	(s2 < 0) ? pc := @lz	// (sgn_i < 0) ? ufl
	P0 := ~s0	// frac_o := max
@lz	P2 P1	// clean
	pc := P7 }	// RETURN =>  ** SUB END **
	
// LIM_F(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// limit a float to exp 16 bit range by maxing out | flushing to zero (no denorming) 
// 7/5 cycles max/min 
@lim_f {	s3 := -0x8000	// ** LIM_F() START **
	(s1 !<s s3) ? pc := @no_ufl	// exp_i chk
	P0 := 0	// mag_o min
	P1 := s3	// exp_o min
	P2 := 1	// sgn_o 1
	pc := P7, P3	// RETURN =>
@no_ufl	P3 *= -1	// 0x8000
	(s1 <s s3) ? pc := @no_ofl	// exp_i chk
	P0 := -1	// mag_o max
	P1 := s3 - 1	// exp_o max
@no_ofl	pc := P7, P3 }	// RETURN =>  ** SUB END **

	
// EQ_F(0:a_mag, 1:a_exp, 2:a_sgn, 4:b_mag, 5:b_exp, 6:b_sgn, 7:rtn | no chg except flg_o push to 0, rtn consumed) 
// return bool equality comparison of 2 floats, -1:true, 0:false 
// 5/3 cycles max/min 
@eq_f {	(s0 != s4) ? pc := @neq	// ** EQ_F() START **  chk mag  
	(s1 != s5) ? pc := @neq	// chk exp
	(s2 != s6) ? pc := @neq	// chk sgn
	s0 := -1	// flg_o := true
	pc := P7	// RETURN =>
@neq	s0 := 0	// flg_o := false
	pc := P7 }	// RETURN =>  ** SUB END **
	

// LT_F(0:a_mag, 1:a_exp, 2:a_sgn, 4:b_mag, 5:b_exp, 6:b_sgn, 7:rtn | no chg except flg_o push to 0, rtn consumed) 
// return bool less than comparison of 2 floats, -1:true, 0:false 
// 8/3 cycles max/min 
@lt_f {	(s2 <s s6) ? pc := @lt	// ** LT_F() START **  chk sgn  
	(s6 <s s2) ? pc := @nlt
	(s2 < 0) ? pc := @neg
	(s1 <s s5) ? pc := @lt	// chk exp
	(s5 <s s1) ? pc := @nlt
	(s0 <u s4) ? pc := @lt	// chk mag
@nlt	s0 := 0	// flg_o := false
	pc := P7	// RETURN =>
@neg	(s5 <s s1) ? pc := @lt	// chk exp
	(s1 <s s5) ? pc := @nlt
	(s0 !<u s4) ? pc := @nlt	// chk mag
@lt	s0 := -1	// flg_o := true
	pc := P7 }	// RETURN =>  ** SUB END **


// MUL_F(0:a_mag, 1:a_exp, 2:a_sgn, 4:b_mag, 5:b_exp, 6:b_sgn, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the multiplicaion of 2 floats 
// 8/6 cycles max/min 
@mul_f {	P0 *xu= P4	// ** MUL_F() START **  mag_o := a_mag * b_mag  
	P1 += P5	// exp_o := a_exp + b_exp
	P2 *= P6	// sgn_o := a_sgn * b_sgn
	(s0 != 0) ? pc := @nz	// mag_o zero chk
	P1 := -0x8000	// exp_o := min
	P2 := 1	// sgn_o := 1
	pc := P7	// RETURN =>
@nz	(s0 < 0) ? pc := @lz	// mag_o denorm chk
	P0 <<= 1	// mag_o norm
	P1--	// exp_o norm
@lz	pc := P7 }	// RETURN =>  ** SUB END **

	
// SQR_F(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the square of a float 
// 8/2 cycles max/min 
@sqr_f {	(s0 != 0) ? pc := @nz	// ** SQR_F() START **  mag_i zero chk  
	pc := P7	// RETURN =>
@nz	P0 *xu= s0	// mag_o := mag_i * mag_i
	P1 *= 2	// exp_o := exp_i * 2
	P2 := 1	// sgn_o := 1
	(s0 < 0) ? pc := @lz	// mag_o denorm chk
	P0 <<= 1	// mag_o norm
	P1--	// exp_o norm
@lz	pc := P7 }	// RETURN =>  ** SUB END **

	
// ADD_F(0:a_mag, 1:a_exp, 2:a_sgn, 4:b_mag, 5:b_exp, 6:b_sgn, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the addition of 2 floats 
// 16/3 cycles max/min 
@add_f {	(s4 != 0) ? pc := @b_nz	// ** ADD_F() START **  b_mag zero chk  
	P4 P5 P6	// pop b (o := a)
	pc := P7	// RETURN =>
@b_nz	(s0 != 0) ? pc := @ab_nz	// a_mag zero chk
	P0 := P4	// o := b, pop a
	P1 := P5
	P2 := P6
	pc := P7	// RETURN =>
@ab_nz	(s1 <s s5) ? pc := @a_shr	// (a_exp <s b_exp) ?
	P5 -= s1	// b_exp -= a_exp
	P4 <<= P5	// b_mag >>
	pc := @sgn_ck
@a_shr	s1 -= s5	// a_exp -= b_exp
	P0 <<= P1	// a_mag >>
	P1 := P5	// exp_o := b_exp
@sgn_ck	(s2 != s6) ? pc := @s_dif	// (a_sgn != b_sgn) ?
	s0 +xu= s4	// ofl check
	(P0 == 0) ? pc := @no_ofl
	P0 += P4	// a_mag += b_mag
	P0 >>= 1	// mag_o >>= 1
	P0 := nsb(s0)	// mag_o msb := 1
	P1++	// exp_o++
	pc := P7, P6	// RETURN =>, pop b_sgn
@no_ofl	P0 += P4	// a_mag += b_mag
	pc := P7, P6	// RETURN =>, pop b_sgn
@s_dif	(s0 <u s4) ? pc := @a_lt	// (a_mag <u b_mag) ?
	P0 -= P4	// a_mag -= b_mag
	pc := @z_chk
@a_lt	P4 -= P0	// b_mag -= a_mag
	s0 := P4	// o := b, pop a
	P2 := s6
@z_chk	(s0 != 0) ? pc := @norm	// (a_mag != 0) ?
	P1 := -0x8000	// exp min
	P2 := 1	// sgn +1
	pc := P7, P6	// RETURN =>, pop b_sgn
@norm	s3 := lzc(s0)	// norm
	P0 <<= s3
	P1 -= P3
	pc := P7, P6 }	// RETURN =>, pop b_sgn  ** SUB END **

// SUB_F(0:a_mag, 1:a_exp, 2:a_sgn, 4:b_mag, 5:b_exp, 6:b_sgn, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the subtraction of 2 floats
// 18/5 cycles max/min 
@sub_f {	P6 *= -1 	// ** SUB_F() START **  -b_sgn  
	pc := @add_f }	// => add_f()


// INV_F(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the inverse of a float 
// 25/4 cycles max/min 
@inv_f {	(s0 != 0) ? pc := @nz	// ** INV_F() START **  chk mag 
	P0 := -1	// mag_o max
	P1 := 0x7fff	// exp_o max
	pc := P7	// RETURN =>
@nz	s3 := 1 << 31	// initial guess
	s0 *xu= s3	// 1x Newton-Raphson
	P0 *= -2
	P0 *xu= s3
	P3 += P0
	s0 *xu= s3	// 2x
	P0 *= -2
	P0 *xu= s3
	P3 += P0
	s0 *xu= s3	// 3x
	P0 *= -2
	P0 *xu= s3
	P3 += P0
	s0 *xu= s3	// 4x
	P0 *= -2
	P0 *xu= s3
	P3 += P0
	P0 *xu= s3	// 5x
	P0 *= -2
	P0 *xu= s3
	P0 += P3	// note: move & pop
	P1 *= -1	// exp_o := (-exp_i)++
	P1++
	pc := P7 }	// RETURN =>  ** SUB END **

	
// SQRT_F(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the square root of a float 
// note: negative inputs return negative outputs! 
// 40/2 cycles max/min 
@sqrt_f {	(s0 != 0) ? pc := @nz	// ** SQRT_F() START **  chk mag 
	pc := P7	// RETURN =>
@nz	P0 <<= 1	// chvar
	s4 := 0x212653	// J, poly start
	P4 *xu= s0	// x(J)
	s5 := 0xdea633	// I
	P5 -= P4	// I-x(J)
	P5 *xu= s0	// x(I-x(J))
	s4 := 0x2c4fea2	// H
	P4 -= P5	// H-x(I-x(J))
	P4 *xu= s0	// x(H-x(I-x(J)))
	s5 := 0x5c5f905	// G
	P5 -= P4	// G-x(H-x(I-x(J)))
	P5 *xu= s0	// x(G-x(H-x(I-x(J))))
	s4 := 0x961eabc	// F
	P4 -= P5	// F-x(G-x(H-x(I-x(J))))
	P4 *xu= s0	// x(F-x(G-x(H-x(I-x(J)))))
	s5 := 0xda76022	// E
	P5 -= P4	// E-x(F-x(G-x(H-x(I-x(J)))))
	P5 *xu= s0	// x(E-x(F-x(G-x(H-x(I-x(J))))))
	s4 := 0x13ee1562	// D
	P4 -= P5	// D-x(E-x(F-x(G-x(H-x(I-x(J))))))
	P4 *xu= s0	// x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))
	s5 := 0x1ffdcf05	// C
	P5 -= P4	// C-x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))
	P5 *xu= s0	// x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J))))))))
	s4 := 0x3fffdb85	// B
	P4 -= P5	// B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J))))))))
	P4 *xu= s0	// x(B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))))
	s5 := 0xffffff05	// A
	P5 -= P4	// A-x(B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))))
	P0 *xu= P5	// x(A-x(B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))))), poly end
	s6 := 0xb504f335	// even offset factor: 1/sqrt(2)
	(s1 != odd) ? pc := @even	// chk exp_i tst
	P6 *xu= s6	// square factor if EXP_i odd
@even	P0 *xu= s6	// mag_o scale
	P0 >>= 1	// mag_o / 2
	P0 += P6	// mag_o offset
	P1++	// exp++
	P1 >>>= 1	// exp/2
	pc := P7 }	// RETURN =>  ** SUB END **

// SQRT_F_LQ(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the square root of a float 
// note: negative inputs return negative outputs! 
// < +/-0.0012% error
// 22/2 cycles max/min 
@sqrt_f_lq {	(s0 != 0) ? pc := @nz	// ** SQRT_F_LQ() START **  chk mag 
	pc := P7	// RETURN =>
@nz	P0 <<= 1	// chvar
	s4 := 0x5661db8	// D, poly start
	P4 *xu= s0	// x(D)
	s5 := 0x1741c73a	// C
	P5 -= P4	// C-x(D)
	P5 *xu= s0	// x(C-x(D))
	s4 := 0x3d8ddbaf	// B
	P4 -= P5	// B-x(C-x(D))
	P4 *xu= s0	// x(B-x(C-x(D)))
	s5 := 0xffc5fef8	// A
	P5 -= P4	// A-x(B-x(C-x(D)))
	P0 *xu= P5	// x(A-x(B-x(C-x(D)))), poly end
	s6 := 0xb504f335	// even offset factor: 1/sqrt(2)
	(s1 != odd) ? pc := @even	// chk exp_i tst
	P6 *xu= s6	// square factor if EXP_i odd
@even	P0 *xu= s6	// mag_o scale
	P0 >>= 1	// mag_o / 2
	P0 += P6	// mag_o offset
	P1++	// exp++
	P1 >>>= 1	// exp/2
	pc := P7 }	// RETURN =>  ** SUB END **

	
// EXP2_F(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the exponential base 2 of a float 
// 35/34 cycles max/min 
@exp2_f {	P2 >>>= 31	// ** EXP2_F() START **  SGN_i (-1,+1) to (-1,0)  
	s3 := 15	// exp_i max
	(s1 !<s s3) ? pc := @exp_nl	// chk exp
	P3 := s1	// exp_i move
@exp_nl	P1 := s0	// mag_i copy
	P0 <<= s3	// poly_i := mag_i << exp_i
	P0 ^= s2	// ~poly_i
	s4 := 0x16b2e	// G, poly start
	P4 *xu= s0	// x(G)
	s5 := 0x95e5d	// F
	P5 += P4	// F+x(G)
	P5 *xu= s0	// x(F+x(G))
	s4 := 0x5805f1	// E
	P4 += P5	// E+x(F+x(G))
	P4 *xu= s0	// x(E+x(F+x(G)))
	s5 := 0x2760569	// D
	P5 += P4	// D+x(E+x(F+x(G)))
	P5 *xu= s0	// x(D+x(E+x(F+x(G))))
	s4 := 0xe3599ea	// C
	P4 += P5	// C+x(D+x(E+x(F+x(G))))
	P4 *xu= s0	// x(C+x(D+x(E+x(F+x(G)))))
	s5 := 0x3d7f7912	// B
	P5 += P4	// B+x(C+x(D+x(E+x(F+x(G)))))
	P5 *xu= s0	// x(B+x(C+x(D+x(E+x(F+x(G))))))
	s4 := 0xb1721822	// A
	P4 += P5	// A+x(B+x(C+x(D+x(E+x(F+x(G))))))
	P0 *xu= P4	// x(A+x(B+x(C+x(D+x(E+x(F+x(G))))))), poly end
	P0 >>= 1	// mag_o := nsb(poly_o / 2)
	P0 := nsb(s0)
	P3 -= 32	// exp_o := mag_i << (exp_i-32)
	P1 <<= P3
	P1 ^= P2	// ~exp_o
	P1++	// exp_o++
	s2 := 1	// sgn_o := 1
	pc := P7 }	// RETURN =>  ** SUB END **
	
// EXP2_F_LQ(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the exponential base 2 of a float 
// < +/-0.0005% error
// 26/25 cycles max/min 
@exp2_f_lq {	P2 >>>= 31	// ** EXP2_F_LQ() START **  SGN_i (-1,+1) to (-1,0)  
	s3 := 15	// exp_i max
	(s1 !<s s3) ? pc := @exp_nl	// chk exp
	P3 := s1	// exp_i move
@exp_nl	P1 := s0	// mag_i copy
	P0 <<= s3	// poly_i := mag_i << exp_i
	P0 ^= s2	// ~poly_i
	s4 := 0x381e7f3	// D, poly start
	P4 *xu= s0	// x(D)
	s5 := 0xd3f3ded	// C
	P5 += P4	// C+x(D)
	P5 *xu= s0	// x(C+x(D))
	s4 := 0x3dd62210	// B
	P4 += P5	// B+x(C+x(D))
	P4 *xu= s0	// x(B+x(C+x(D)))
	s5 := 0xb168b812	// A
	P5 += P4	// A+x(B+x(C+x(D)))
	P0 *xu= P5	// x(A+x(B+x(C+x(D)))), poly end
	P0 >>= 1	// mag_o := nsb(poly_o / 2)
	P0 := nsb(s0)
	P3 -= 32	// exp_o := mag_i << (exp_i-32)
	P1 <<= P3
	P1 ^= P2	// ~exp_o
	P1++	// exp_o++
	s2 := 1	// sgn_o := 1
	pc := P7 }	// RETURN =>  ** SUB END **

// EXP2_F_VLQ(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the exponential base 2 of a float 
// < +/-0.33% error
// 20/19 cycles max/min 
@exp2_f_vlq {	P2 >>>= 31	// ** EXP2_F_VLQ() START **  SGN_i (-1,+1) to (-1,0)  
	s3 := 15	// exp_i max
	(s1 !<s s3) ? pc := @exp_nl	// chk exp
	P3 := s1	// exp_i move
@exp_nl	P1 := s0	// mag_i copy
	P0 <<= s3	// poly_i := mag_i << exp_i
	P0 ^= s2	// ~poly_i
	s4 := 0x58053951	// B, poly start
	P4 *xu= s0	// x(B)
	s5 := 0xa7fac6af	// A
	P5 += P4	// A+x(B)
	P0 *xu= P5	// x(A+x(B)), poly end
	P0 >>= 1	// mag_o := nsb(poly_o / 2)
	P0 := nsb(s0)
	P3 -= 32	// exp_o := mag_i << (exp_i-32)
	P1 <<= P3
	P1 ^= P2	// ~exp_o
	P1++	// exp_o++
	s2 := 1	// sgn_o := 1
	pc := P7 }	// RETURN =>  ** SUB END **
	
	
// LOG2_F(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the log base 2 of a float 
// note: input sign is ignored! 
// 49/47 cycles max/min 
@log2_f {	P0 <<= 1	// ** LOG2_F() START **  mag_c (chvar)  
	P1--	// exp_c 
	P2 := sgn(s1)	// sgn_o
	s4 := 0x4b1cd5	// K, poly start
	P4 *xu= s0	// x(K)
	s5 := 0x2096325	// J
	P5 -= P4	// J-x(K)
	P5 *xu= s0	// x*
	s4 := 0x6a3f6b7	// I
	P4 -= P5	// I-x(J-x(K))
	P4 *xu= s0	// x*
	s5 := 0xde4798f	// H
	P5 -= P4	// H-x(I-x(J-x(K)))
	P5 *xu= s0	// x*
	s4 := 0x15db2d4d	// G
	P4 -= P5	// G-x(H-x(I-x(J-x(K))))
	P4 *xu= s0	// x*
	s5 := 0x1d2f566c	// F
	P5 -= P4	// F-x(G-x(H-x(I-x(J-x(K)))))
	P5 *xu= s0	// x*
	s4 := 0x248c0be4	// E
	P4 -= P5	// E-x(F-x(G-x(H-x(I-x(J-x(K))))))
	P4 *xu= s0	// x*
	s5 := 0x2e1ad8bf	// D
	P5 -= P4	// D-x(E-x(F-x(G-x(H-x(I-x(J-x(K)))))))
	P5 *xu= s0	// x*
	s4 := 0x3d8c8dfa	// C
	P4 -= P5	// C-x(D-x(E-x(F-x(G-x(H-x(I-x(J-x(K))))))))
	P4 *xu= s0	// x*
	s5 := 0x5c5509a7	// B
	P5 -= P4	// B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(K-x(K)))))))))
	P5 *xu= s0	// x*
	s4 := 0xb8aa3acf	// A
	P4 -= P5	// A-x(B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(K-x(K))))))))))
	P0 *xu= P4	// x*, poly end
	s1 *= s2	// exp_c *= sgn_o (abs(exp_c))
	s3 := lzc(P1)	// lzc(abs(exp_c))
	P1 <<= s3	// exp_c shift left (mag_o MSbs)
	s3 -= 31	// poly_o shift right (mag_o LSbs)
	P0 <<= P3	// 
	P0 += P1	// mag_o := MSBs + LSBs
	P0 *= s2	// mag_o *= sgn_o
	s1 := 32	// exp_o := 32 - lzc
	P1 -= P3
	(s0 != 0) ? pc := @nz	// mag chk
	P1 := -0x8000	// exp min
	pc := P7	// RETURN =>
@nz	s3 := lzc(s0)	// output norm
	P0 <<= s3	// mag_o norm
	P1 -= P3	// exp_o norm
	pc := P7 }	// RETURN =>  ** SUB END **

// LOG2_F_LQ(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the log base 2 of a float 
// note: input sign is ignored! 
// < +/-0.0008% error
// 31/28 cycles max/min 
@log2_f_lq {	P0 <<= 1	// ** LOG2_F_LQ() START **  mag_c (chvar)  
	P1--	// exp_c 
	P2 := sgn(s1)	// sgn_o
	s4 := 0x5cb499e	// E, poly start
	P4 *xu= s0	// x(E)
	s5 := 0x18d048bf	// D
	P5 -= P4	// D-x(E)
	P5 *xu= s0	// x*
	s4 := 0x3539ddfa	// C
	P4 -= P5	// C-x(D-x(E))
	P4 *xu= s0	// x*
	s5 := 0x5ac5b9a7	// B
	P5 -= P4	// B-x(C-x(D-x(E)))
	P5 *xu= s0	// x*
	s4 := 0xb890dacf	// A
	P4 -= P5	// A-x(B-x(C-x(D-x(E))))
	P0 *xu= P4	// x*, poly end
	s1 *= s2	// exp_c *= sgn_o (abs(exp_c))
	s3 := lzc(P1)	// lzc(abs(exp_c))
	P1 <<= s3	// exp_c shift left (mag_o MSbs)
	s3 -= 31	// poly_o shift right (mag_o LSbs)
	P0 <<= P3	// 
	P0 += P1	// mag_o := MSBs + LSBs
	P0 *= s2	// mag_o *= sgn_o
	s1 := 32	// exp_o := 32 - lzc
	P1 -= P3
	(s0 != 0) ? pc := @nz	// mag chk
	P1 := -0x8000	// exp min
	pc := P7	// RETURN =>
@nz	s3 := lzc(s0)	// output norm
	P0 <<= s3	// mag_o norm
	P1 -= P3	// exp_o norm
	pc := P7 }	// RETURN =>  ** SUB END **

// LOG2_F_VLQ(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the log base 2 of a float 
// note: input sign is ignored! 
// < +/-0.025% error
// 22/19 cycles max/min 
@log2_f_vlq {	P0 <<= 1	// ** LOG2_F_VLQ() START **  mag_c (chvar)  
	P1--	// exp_c 
	P2 := sgn(s1)	// sgn_o
	s4 := 0x2c5be890	// B, poly start
	P4 *xu= s0	// x(B)
	s5 := 0xac5be890	// A
	P5 -= P4	// A-x(B)
	P0 *xu= P5	// x*, poly end
	s1 *= s2	// exp_c *= sgn_o (abs(exp_c))
	s3 := lzc(P1)	// lzc(abs(exp_c))
	P1 <<= s3	// exp_c shift left (mag_o MSbs)
	s3 -= 31	// poly_o shift right (mag_o LSbs)
	P0 <<= P3	// 
	P0 += P1	// mag_o := MSBs + LSBs
	P0 *= s2	// mag_o *= sgn_o
	s1 := 32	// exp_o := 32 - lzc
	P1 -= P3
	(s0 != 0) ? pc := @nz	// mag chk
	P1 := -0x8000	// exp min
	pc := P7	// RETURN =>
@nz	s3 := lzc(s0)	// output norm
	P0 <<= s3	// mag_o norm
	P1 -= P3	// exp_o norm
	pc := P7 }	// RETURN =>  ** SUB END **

	
// POW_F(0:a_mag, 1:a_exp, 2:a_sgn, 4:b_mag, 5:b_exp, 6:b_sgn, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return x^y
// 4 +49+8+35 = 96 cycles max
@pow_f {	s7 := pc := @log2_f	// <=> log2_f()  ** POW_F() START **  
	s7 := pc := @mul_f	// <=> mul_f()
	s7 := pc := @exp2_f	// <=> exp2_f()
	pc := P7 }	// RETURN =>  ** SUB END **

// POW_F_LQ(0:a_mag, 1:a_exp, 2:a_sgn, 4:b_mag, 5:b_exp, 6:b_sgn, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return x^y
// 4 +31+8+26 = 69 cycles max
@pow_f_lq {	s7 := pc := @log2_f_lq	// <=> log2_f_lq()  ** POW_F_LQ() START **  
	s7 := pc := @mul_f	// <=> mul_f()
	s7 := pc := @exp2_f_lq	// <=> exp2_f_lq()
	pc := P7 }	// RETURN =>  ** SUB END **

// POW_F_VLQ(0:a_mag, 1:a_exp, 2:a_sgn, 4:b_mag, 5:b_exp, 6:b_sgn, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return x^y
// 4 +22+8+20 = 54 cycles max
@pow_f_vlq {	s7 := pc := @log2_f_vlq	// <=> log2_f_vlq()  ** POW_F_VLQ() START **  
	s7 := pc := @mul_f	// <=> mul_f()
	s7 := pc := @exp2_f_vlq	// <=> exp2_f_vlq()
	pc := P7 }	// RETURN =>  ** SUB END **

	
// COS_F(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the cosine of a float 
// 34/15 cycles max/min 
@cos_f {	s3 := 0xa2f9836e	// ** COS_F() START **  2/pi  
	P0 *xu= P3	// mag_i * 2/pi
	P1 -= 2	// exp_i -= 2
	P0 <<= P1	// mag_i << exp_i (frac part of cycle)
	P2 := sgn(s0)	// sgn_31 (pop sgn_i, unused)
	P0 <<= 1	// mag_i << 1
	s3 := sgn(s0)	// sgn_30
	P0 *= s3	// abs := mag_i * sgn_30
	P2 *= P3	// sgn_o := sgn_31 * sgn_30
	(s0 < 0) ? pc := @z_o	// abs neg check (0x8000,0000 fails)
	P0 <<= 1	// poly_i := abs << 1
	P0 *xu= s0	// x^2 (do poly)
	s4 := 0xc84f	// F
	P4 *xu= s0	// x^2(F)
	s5 := 0x1e137a	// E
	P5 -= P4	// E-x^2(F)
	P5 *xu= s0	// x^2(E-x^2(F))
	s4 := 0x2aba1c0	// D
	P4 -= P5	// D-x^2(E-x^2(F))
	P4 *xu= s0	// x^2(C-x^2(D-x^2(E)))
	s5 := 0x20783cc8	// C
	P5 -= P4	// C-x^2(D-x^2(E-x^2(F)))
	P5 *xu= s0	// x^2(C-x^2(D-x^2(E-x^2(F))))
	s4 := 0x9de9e634	// B
	P4 -= P5	// B-x^2(C-x^2(D-x^2(E-x^2(F))))
	P4 *xu= P0	// x^2(B-x^2(C-x^2(D-x^2(E-x^2(F)))))
	s0 := 0x7fffffff	// A
	P0 -= P4	// A-x^2(B-x^2(C-x^2(D-x^2(E-x^2(F)))))
	(s0 == 0) ? pc := @z_o	// poly_o zero check
	s3 := lzc(s0)	// lzc, <-z_chk
	P0 <<= s3	// norm mag_o
	s1 := 1	// exp_o := 1 - lzc
	P1 -= P3
	pc := P7	// RETURN => 
@z_o	P0 := 0	// poly_o := 0
	s1 := -0x8000	// exp_o := floor
	P2 := 1	// sgn_o := +1
	pc := P7 }	// RETURN =>  ** SUB END **

	
// SIN_F(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the sine of a float 
// 35/12 cycles max/min 
@sin_f {	s3 := 0xa2f9836e	// ** SIN_F() START **  2/pi  
	P0 *xu= P3	// mag_i * 2/pi
	P1 -= 2	// exp_i -= 2
	P0 <<= P1	// cyc := mag_i << exp_i (frac part of cycle)
	s3 := sgn(s0)	// sgn_31 := sgn(cyc)
	P2 *= P3	// sgn_o := sgn_i * sgn_31
	P0 <<= 1	// cyc := cyc << 1
	(s0 == 0) ? pc := @z_o	// cyc zero check
	s3 := sgn(s0)	// sgn_30 := sgn(cyc)
	P0 *= P3	// abs := cyc * sgn_30
	P0 *= -1	// nabs := -abs
	P0 <<= 1	// poly_i := nabs << 1
	P0 *xu= s0	// x^2 (do poly)
	s4 := 0xc84f	// F
	P4 *xu= s0	// x^2(F)
	s5 := 0x1e137a	// E
	P5 -= P4	// E-x^2(F)
	P5 *xu= s0	// x^2(E-x^2(F))
	s4 := 0x2aba1c0	// D
	P4 -= P5	// D-x^2(E-x^2(F))
	P4 *xu= s0	// x^2(C-x^2(D-x^2(E)))
	s5 := 0x20783cc8	// C
	P5 -= P4	// C-x^2(D-x^2(E-x^2(F)))
	P5 *xu= s0	// x^2(C-x^2(D-x^2(E-x^2(F))))
	s4 := 0x9de9e634	// B
	P4 -= P5	// B-x^2(C-x^2(D-x^2(E-x^2(F))))
	P4 *xu= P0	// x^2(B-x^2(C-x^2(D-x^2(E-x^2(F)))))
	s0 := 0x7fffffff	// A
	P0 -= P4	// A-x^2(B-x^2(C-x^2(D-x^2(E-x^2(F)))))
	(s0 == 0) ? pc := @z_o	// poly_o zero check
	s3 := lzc(s0)	// lzc, <-z_chk
	P0 <<= s3	// norm mag_o
	s1 := 1	// exp_o := 1 - lzc
	P1 -= P3
	pc := P7	// RETURN => 
@z_o	P0 := 0	// poly_o := 0
	s1 := -0x8000	// exp_o := floor
	P2 := 1	// sgn_o := +1
	pc := P7 }	// RETURN =>  ** SUB END **

// SIN_F_LQ(0:mag_i, 1:exp_i, 2:sgn_i, 7:rtn | 0:mag_o, 1:exp_o, 2:sgn_o) 
// return the sine of a float 
// good enough for 16 bit audio work
// 27/12 cycles max/min 
@sin_f_lq {	s3 := 0xa2f9836e	// ** SIN_F_LQ() START **  2/pi  
	P0 *xu= P3	// mag_i * 2/pi
	P1 -= 2	// exp_i -= 2
	P0 <<= P1	// cyc := mag_i << exp_i (frac part of cycle)
	s3 := sgn(s0)	// sgn_31 := sgn(cyc)
	P2 *= P3	// sgn_o := sgn_i * sgn_31
	P0 <<= 1	// cyc := cyc << 1
	(s0 == 0) ? pc := @z_o	// cyc zero check
	s3 := sgn(s0)	// sgn_30 := sgn(cyc)
	P0 *= P3	// abs := cyc * sgn_30
	P0 *= -1	// nabs := -abs
	P0 <<= 1	// poly_i := nabs << 1
	s0 *xu= s0	// x^2 (do poly)
	s4 := 0x925d800	// C
	P4 *xu= s0	// x^2(C)
	s5 := 0x52239278	// B
	P5 -= P4	// B-x^2(C)
	P5 *xu= P0	// x^2(B-x^2(C))
	s4 := 0xc8fdba78	// A
	P4 -= P5	// A-x^2(B-x^2(C))
	P0 *xu= P4	// x(A-x^2(B-x^2(D)))
	(s0 == 0) ? pc := @z_o	// poly_o zero check
	s3 := lzc(s0)	// lzc, <-z_chk
	P0 <<= s3	// norm mag_o
	s1 := 1	// exp_o := 1 - lzc
	P1 -= P3
	pc := P7	// RETURN => 
@z_o	P0 := 0	// poly_o := 0
	s1 := -0x8000	// exp_o := floor
	P2 := 1	// sgn_o := +1
	pc := P7 }	// RETURN =>  ** SUB END **
	
