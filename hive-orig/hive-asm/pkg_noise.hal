
// LFSR_32(0:in | 0:out) 
// generate pseudo-random noise
// Fibonacci method requires whitening
// 6 cycles max/min
@lfsr_32 {	s1 := 0x80200003	// taps  ** LFSR_32() START **
	P1 &= s0	// apply taps
	P1 := ^s1	// xor taps
	P0 <<= 1	// shl
	P0 -= P1	// set lsb
	pc := P7 }	// RETURN =>  ** SUB END **
	

// NOISE_WHITE(6:addr, 7:rtn | 0:out) 
// generate white audio noise
// 32 bit signed output
// 8 +6 = 14 cycles max/min
@noise_white {	s0 := mem[s6]	// get noise reg  ** NOISE_WHITE() START ** 
	s1 := nsb(s0)	// old: uns => sgn
	s7 := pc := @lfsr_32	// <=> lfsr_32()
	mem[P6] := s0	// sto noise reg
	P0 := nsb(s0)	// new: uns => sgn
	P1 >>>= 1	// old/2
	P0 -= P1	// new - old/2	
	pc := P7 }	// RETURN =>  ** SUB END **


// NOISE_PINK(6:addr, 7:rtn | 0:out) 
// generate pink audio noise
// 32 bit signed output
// 23 +6 = 29 cycles
@noise_pink {	s0 := mem[s6]	// get noise reg  ** NOISE_PINK() START ** 
	s7 := pc := @lfsr_32	// <=> lfsr_32()
	mem[P6] := s0	// sto noise reg
	s1 := P0 & 1	// lsb
	s0 := mem[@pink]	// get pink
	s4 :hu= mem[@tree_cnt]	// get count
	P4--	// count--
	(s4 != 0) ? pc := @c_nz	// (count != 0) ? skip
	P4 := 2048	// count := 2048 (max)
@c_nz	mem[@tree_cnt] :h= s4	// sto count
	P4 := flp(s4)	// flip count
	P4 := lzc(s4)	// trailing zero count
	P1 <<= s4	// new := noise lsb << tzc
	s2 := 1 << P4	// 1 << tzc
	s5 :hu= mem[@sh_bits]	// get sh bits
	s5 &= s2	// old := mask sh bit (cpy)
	(s1 == P5) ? pc := @n_eq_o	// (new == old) ? done
	(s1 == 0) ? pc := @n_z	// (new == 0) ? 
	P0++	// pink++
	P5 +u= s2	// set bit
	pc := @sto
@n_z	P0--	// pink--
	P5 -u= s2	// clr bit
@sto	mem[@pink] := s0	// sto pink
	mem[@sh_bits] :h= s5 	// sto sh bits
@n_eq_o	P5, P2, P1	// clean
	P0 <<<= 27	// full scale
	pc := P7	// RETURN =>
@pink	mem[1] := ( 0 )	// noise
@sh_bits	mem[1] :h= ( 0x555 )	// sample & hold bits
@tree_cnt	mem[1] :h= ( 1 ) }	// tree counter   ** SUB END **


// NOISE_PULSE(2:duty, 4:puls, 7:rtn | 1:out) 
// control of noise pulsing (linear)
// 9 cycles
@noise_pulse {	s1 := mem[@o_osc0_ds+8]	// get osc0 pm  ** NOISE_PULSE() START **  
	P1 := nsb(s1)	// sgn => uns
	P1 := ~s1	// ~pm
	P1 -u= P2	// ~pm - duty
	P1 := lim(s1)	// lim
	P1 *xu= P4	// lim * puls
	P1 *u= 16	// * 16
	P1 := lim(s1)	// lim
	pc := P7 }	// RETURN =>  ** SUB END **

