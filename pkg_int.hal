// NEWT_REPS(0:in, 2:guess, 7:rtn_i | 0:out, 2:out) 
// do newton-raphson reps
// 15 cycles max
@newt_reps {	s0 *= s2	// 1x  ** NEWT_REPS() START **  
	P0 *xu= s2
	P2 += P0
	s0 *= s2	// 2x
	P0 *xu= s2
	P2 += P0
	s0 *= s2	// 3x
	P0 *xu= s2
	P2 += P0
	s0 *= s2	// 4x
	P0 *xu= s2
	P2 += P0
	P0 *= s2	// 5x
	P0 *xu= s2
	pc := P7 }	// RETURN =>  ** SUB END **


// INV_UINT(0:a_i, 7:rtn_i | 0:1/a) 
// return 1/a, UINT => UFRAC (and vice-versa)
// 7 + 15 = 22 cycles max
@inv_uint {	(s0 != 0) ? pc := @a_nz	// (a != 0) ?  ** INV_UINT() START **  
	P0 := -1	// 1/a := max
	pc := P7	// => RETURN
@a_nz	s2 := lzc(s0)	// initial guess
	P2 := 1 << s2	// x := pow(lzc(a_i))
	P0 *= -1	// na := -a_i
	s7 := pc := @newt_reps	// <=> newt_reps()
	P0 += P2
	pc := P7 }	// RETURN =>  ** SUB END **
	

// DIV_MOD_UINT(0:a_i, 1:b_i, 7:rtn_i | 0:q_o, 1:r_o) 
// return the quotient and remainder of b/a, UINT
// 17 + 15 = 32 cycles max
@div_mod_uint {	(s0 != 0) ? pc := @a_nz	// (a_i != 0) ?  ** DIV_MOD_UINT() START **  
	P0 := -1	// q_o := max
	P1 := 0	// r_o := 0
	pc := P7	// => RETURN
@a_nz	s2 := lzc(s0)	// initial guess
	P2 := 1 << s2	// x := pow(lzc(a_i))
	s0 *= -1	// na := -a_i
	s7 := pc := @newt_reps	// <=> newt_reps()
	P2 += P0
	P2 *xu= s1	// q_o := b_i * x
	s2 *= s0	// q_o * a_i
	P1 -= P2	// r_o := b_i - (q_o * a_i)
	(s1 <u s0) ? pc := @r_lt	// (r_o < a_i) ?
	P1 -= s0	// r_o -= a_i
	P2++	// q_o++
	(s1 <u s0) ? pc := @r_lt	// (r_o < a_i) ?
	P1 -= s0	// r_o -= a_i
	P2++	// q_o++
@r_lt	P0 := P2	// move q
	pc := P7 }	// RETURN =>  ** SUB END **
	

// DIV_MOD_INT(0:a_i, 1:b_i, 7:rtn_i | 0:q_o, 1:r_o) 
// return the quotient and remainder of b/a, INT
// 27 + 15 = 42 cycles max
@div_mod_int {	s2 := sgn(s0)	//  abs(a_i)  ** DIV_MOD_INT() START ** 
	P0 *= s2
	s3 := sgn(s1)	// abs(b_i)
	P1 *= s3
	P3 *= P2	// combine signs
	(s0 != 0) ? pc := @a_nz	// (a_i != 0) ?
	P0 := 0x7fffffff	// q_o := max
	P0 *= P3	// q_o *= sign
	P1 := 0	// r_o := 0
	pc := P7	// => RETURN
@a_nz	s2 := lzc(s0)	// initial guess
	P2 := 1 << s2	// x := pow(lzc(a_i))
	s0 *= -1	// na := -a_i
	s7 := pc := @newt_reps	// <=> newt_reps()
	P2 += P0
	P2 *xu= s1	// q_o := b_i * x
	s2 *= s0	// q_o * a_i
	P1 -= P2	// r_o := b_i - (q_o * a_i)
	(s1 <u s0) ? pc := @r_lt	// (r_o < a_i) ?
	P1 -= s0	// r_o -= a_i
	P2++	// q_o++
	(s1 <u s0) ? pc := @r_lt	// (r_o < a_i) ? 
	P1 -= s0	// r_o -= a_i
	P2++	// q_o++
@r_lt	P1 *= s3	// apply sign
	P2 *= P3
	(s1 !< 0) ? pc := @r_nlz	// (r_o !< 0) ? rnlz->
	P1 += s0
	P2--
@r_nlz	P0 := P2	// move q, <-rnlz
	pc := P7 }	// RETURN =>  ** SUB END **

	
// SQRT_UINT(0:a_i, 7:rtn | 0:sqrt_o) 
// return the square root of a UINT, input 32, output 16.16  
// 43/2 cycles max/min
@sqrt_uint {	(s0 != 0) ? pc := @nz	// mag chk  ** SQRT_UINT() START **  
	pc := P7	// RETURN =>
@nz	s1 := lzc(s0)	// -exp
	P0 <<= s1	// norm
	P0 <<= 1	// chvar
	s4 := 0x212653	// J, poly start
	P4 *xu= s0	// x(J)
	s5 := 0xdea633	// I
	P5 -= P4	// I-x(J)
	P5 *xu= s0	// x(I-x(J))
	s4 := 0x2c4fea2	// H
	P4 -= P5	// H-x(I-x(J))
	P4 *xu= s0	// x(H-x(I-x(J)))
	s5 := 0x5c5f905	// G
	P5 -= P4	// G-x(H-x(I-x(J)))
	P5 *xu= s0	// x(G-x(H-x(I-x(J))))
	s4 := 0x961eabc	// F
	P4 -= P5	// F-x(G-x(H-x(I-x(J))))
	P4 *xu= s0	// x(F-x(G-x(H-x(I-x(J)))))
	s5 := 0xda76022	// E
	P5 -= P4	// E-x(F-x(G-x(H-x(I-x(J)))))
	P5 *xu= s0	// x(E-x(F-x(G-x(H-x(I-x(J))))))
	s4 := 0x13ee1562	// D
	P4 -= P5	// D-x(E-x(F-x(G-x(H-x(I-x(J))))))
	P4 *xu= s0	// x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))
	s5 := 0x1ffdcf05	// C
	P5 -= P4	// C-x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))
	P5 *xu= s0	// x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J))))))))
	s4 := 0x3fffdb85	// B
	P4 -= P5	// B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J))))))))
	P4 *xu= s0	// x(B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))))
	s5 := 0xffffff05	// A
	P5 -= P4	// A-x(B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))))
	P0 *xu= P5	// x(A-x(B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(J)))))))))), poly end
	s6 := 0xb504f335	// even offset factor: 1/sqrt(2)
	(s1 != odd) ? pc := @even	// exp tst
	P6 *xu= s6	// square factor if exp odd
@even	P0 *xu= s6	// scale
	P0 >>= 1	// 1/2
	P0 += P6	// offset
	P1 >>= 1	// -exp/2
	P1 *= -1	// exp/2
	P0 <<= P1	// shift
	pc := P7 }	// RETURN =>  ** SUB END **
	
// SQRT_UINT_LQ(0:a_i, 7:rtn | 0:sqrt_o) 
// return the square root of a UINT, input 32, output 16.16  
// < +/-0.0012% error, no error for 16 bit left justified input
// 25/2 cycles max/min
@sqrt_uint_lq {	(s0 != 0) ? pc := @nz	// mag chk  ** SQRT_UINT_LQ() START **  
	pc := P7	// RETURN =>
@nz	s1 := lzc(s0)	// -exp
	P0 <<= s1	// norm
	P0 <<= 1	// chvar
	s4 := 0x5661db8	// D, poly start
	P4 *xu= s0	// x(D)
	s5 := 0x1741c73a	// C
	P5 -= P4	// C-x(D)
	P5 *xu= s0	// x(C-x(D))
	s4 := 0x3d8ddbaf	// B
	P4 -= P5	// B-x(C-x(D))
	P4 *xu= s0	// x(B-x(C-x(D)))
	s5 := 0xffc5fef8	// A
	P5 -= P4	// A-x(B-x(C-x(D)))
	P0 *xu= P5	// x(A-x(B-x(C-x(D)))), poly end
	s6 := 0xb504f335	// even offset factor: 1/sqrt(2)
	(s1 != odd) ? pc := @even	// exp tst
	P6 *xu= s6	// square factor if exp odd
@even	P0 *xu= s6	// scale
	P0 >>= 1	// 1/2
	P0 += P6	// offset
	P1 >>= 1	// -exp/2
	P1 *= -1	// exp/2
	P0 <<= P1	// shift
	pc := P7 }	// RETURN =>  ** SUB END **
	
// SQRT_UINT_NP(0:a_i, 7:rtn | 0:sqrt_o) 
// return the square root of a UINT, input 32, output 16.16  
// < -1.5% error
// 14/2 cycles max/min
@sqrt_uint_np {	(s0 != 0) ? pc := @nz	// mag chk  ** SQRT_UINT_NP() START **  
	pc := P7	// RETURN =>
@nz	s1 := lzc(s0)	// norm
	P0 <<= s1
	P0 <<= 1	// chvar
	s2 := 0xb504f334	// 1/sqrt(2)
	s2 *= -1	// 1 - (1/sqrt(2))
	P0 *xu= P2	// chvar * (1 - (1/sqrt(2)))
	P0 += s2	// offset
	(s1 != odd) ? pc := @even	// lzc tst
	P0 *xu= s2	// scale
@even	P1 >>= 1	// lzc/2
	P1 *= -1	// -lzc/2
	P0 <<= P1	// shift
	pc := P7, P2 }	// RETURN =>  ** SUB END **

	
// EXP2_UINT(0:a_i, 7:rtn_i | 0:exp2_o) 
// return the exponential base 2 of a UINT, input 5.27, output 32 
// 27 cycles max/min
@exp2_uint {	s1 := s0 >> 27	// char  ** EXP2_UINT() START **  
	P0 <<= 5	// mant
	s4 := 0x16b2e	// G, poly start
	P4 *xu= s0	// x(G)
	s5 := 0x95e5d	// F
	P5 += P4	// F+x(G)
	P5 *xu= s0	// x(F+x(G))
	s4 := 0x5805f1	// E
	P4 += P5	// E+x(F+x(G))
	P4 *xu= s0	// x(E+x(F+x(G)))
	s5 := 0x2760569	// D
	P5 += P4	// D+x(E+x(F+x(G)))
	P5 *xu= s0	// x(D+x(E+x(F+x(G))))
	s4 := 0xe3599ea	// C
	P4 += P5	// C+x(D+x(E+x(F+x(G))))
	P4 *xu= s0	// x(C+x(D+x(E+x(F+x(G)))))
	s5 := 0x3d7f7912	// B
	P5 += P4	// B+x(C+x(D+x(E+x(F+x(G)))))
	P5 *xu= s0	// x(B+x(C+x(D+x(E+x(F+x(G))))))
	s4 := 0xb1721822	// A
	P4 += P5	// A+x(B+x(C+x(D+x(E+x(F+x(G))))))
	P0 *xu= P4	// x(A+x(B+x(C+x(D+x(E+x(F+x(G))))))), poly end
	P0 >>= 1	// sig := poly_o/2
	P0 := nsb(s0)	// set sig MSb
	P1 -= 31
	P0 <<= P1	// sig <<= (char-31)
	pc := P7 }	// RETURN =>  ** SUB END **

// EXP2_UINT_LQ(0:a_i, 7:rtn_i | 0:exp2_o) 
// return the exponential base 2 of a UINT, input 5.27, output 32 
// < +/-0.0005% error, no error for 16 bit left justified input
// 18 cycles max/min
@exp2_uint_lq {	s1 := s0 >> 27	// char  ** EXP2_UINT_LQ() START **  
	P0 <<= 5	// mant
	s4 := 0x381e7f3	// D, poly start
	P4 *xu= s0	// x(D)
	s5 := 0xd3f3ded	// C
	P5 += P4	// C+x(D)
	P5 *xu= s0	// x(C+x(D))
	s4 := 0x3dd62210	// B
	P4 += P5	// B+x(C+x(D))
	P4 *xu= s0	// x(B+x(C+x(D)))
	s5 := 0xb168b812	// A
	P5 += P4	// A+x(B+x(C+x(D)))
	P0 *xu= P5	// x(A+x(B+x(C+x(D)))), poly end
	P0 >>= 1	// sig := poly_o/2
	P0 := nsb(s0)	// set sig MSb
	P1 -= 31
	P0 <<= P1	// sig <<= (char-31)
	pc := P7 }	// RETURN =>  ** SUB END **

// EXP2_UINT_VLQ(0:a_i, 7:rtn_i | 0:exp2_o) 
// return the exponential base 2 of a UINT, input 5.27, output 32 
// < +/-0.33% error for larger inputs
// 12 cycles max/min
@exp2_uint_vlq {	s1 := s0 >> 27	// char  ** EXP2_UINT_VLQ() START **  
	P0 <<= 5	// mant
	s4 := 0x58053951	// B, poly start
	P4 *xu= s0	// x(B)
	s5 := 0xa7fac6af	// A
	P5 += P4	// A+x(B)
	P0 *xu= P5	// x(A+x(B)), poly end
	P0 >>= 1	// sig := poly_o/2
	P0 := nsb(s0)	// set sig MSb
	P1 -= 31
	P0 <<= P1	// sig <<= (char-31)
	pc := P7 }	// RETURN =>  ** SUB END **

// EXP2_UINT_NP(0:a_i, 7:rtn_i | 0:exp2_o) 
// return the exponential base 2 of a UINT, input 5.27, output 32 
// +6.15% max error for larger inputs, good enough for volume stuff?
// 7 cycles max/min
@exp2_uint_np {	s1 := s0 >> 27	// char  ** EXP2_UINT_NP() START **  
	P0 <<= 5	// mant
	P0 >>= 1	// sig := mant/2
	P0 := nsb(s0)	// set sig MSb
	P1 -= 31
	P0 <<= P1	// sig <<= (char-31)
	pc := P7 }	// RETURN =>  ** SUB END **


// LOG2_UINT(0:a_i, 7:rtn_i | 0:log2_o) 
// return the log base 2 of a UINT, input 32, output 5.27 
// 40/2 cycles max/min
@log2_uint {	(s0 != 0) ? pc := @nz	// chk zero  ** LOG2_UINT() START **  
	pc := P7	// => RETURN
@nz	s1 := lzc(s0)	// norm
	P0 <<= s1
	P0 <<= 1	// chvar
	s4 := 0x4b1cd5	// K, poly start
	P4 *xu= s0	// x(K)
	s5 := 0x2096325	// J
	P5 -= P4	// J-x(K)
	P5 *xu= s0	// x*
	s4 := 0x6a3f6b7	// I
	P4 -= P5	// I-x(J-x(K))
	P4 *xu= s0	// x*
	s5 := 0xde4798f	// H
	P5 -= P4	// H-x(I-x(J-x(K)))
	P5 *xu= s0	// x*
	s4 := 0x15db2d4d	// G
	P4 -= P5	// G-x(H-x(I-x(J-x(K))))
	P4 *xu= s0	// x*
	s5 := 0x1d2f566c	// F
	P5 -= P4	// F-x(G-x(H-x(I-x(J-x(K)))))
	P5 *xu= s0	// x*
	s4 := 0x248c0be4	// E
	P4 -= P5	// E-x(F-x(G-x(H-x(I-x(J-x(K))))))
	P4 *xu= s0	// x*
	s5 := 0x2e1ad8bf	// D
	P5 -= P4	// D-x(E-x(F-x(G-x(H-x(I-x(J-x(K)))))))
	P5 *xu= s0	// x*
	s4 := 0x3d8c8dfa	// C
	P4 -= P5	// C-x(D-x(E-x(F-x(G-x(H-x(I-x(J-x(K))))))))
	P4 *xu= s0	// x*
	s5 := 0x5c5509a7	// B
	P5 -= P4	// B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(K-x(K)))))))))
	P5 *xu= s0	// x*
	s4 := 0xb8aa3acf	// A
	P4 -= P5	// A-x(B-x(C-x(D-x(E-x(F-x(G-x(H-x(I-x(K-x(K))))))))))
	P0 *xu= P4	// x*, poly end
	P0 >>= 4	// mant
	P1 := 31 - s1	// char
	P1 <<= 27
	P0 |= P1	// combine
	pc := P7 }	// RETURN =>  ** SUB END **

// LOG2_UINT_LQ(0:a_i, 7:rtn_i | 0:log2_o) 
// return the log base 2 of a UINT, input 32, output 5.27 
// < +/-0.0008% error, no error for 16 bit left justified input
// 23/2 cycles max/min
@log2_uint_lq {	(s0 != 0) ? pc := @nz	// chk zero  ** LOG2_UINT_LQ() START **  
	pc := P7	// => RETURN
@nz	s1 := lzc(s0)	// norm
	P0 <<= s1
	P0 <<= 1	// chvar
	s4 := 0x5cb499e	// E, poly start
	P4 *xu= s0	// x(E)
	s5 := 0x18d048bf	// D
	P5 -= P4	// D-x(E)
	P5 *xu= s0	// x*
	s4 := 0x3539ddfa	// C
	P4 -= P5	// C-x(D-x(E))
	P4 *xu= s0	// x*
	s5 := 0x5ac5b9a7	// B
	P5 -= P4	// B-x(C-x(D-x(E)))
	P5 *xu= s0	// x*
	s4 := 0xb890dacf	// A
	P4 -= P5	// A-x(B-x(C-x(D-x(E))))
	P0 *xu= P4	// x*, poly end
	P0 >>= 4	// mant
	s2 := 31 - P1	// char
	P2 <<= 27
	P0 |= P2	// combine
	pc := P7 }	// RETURN =>  ** SUB END **

// LOG2_UINT_VLQ(0:a_i, 7:rtn_i | 0:log2_o) 
// return the log base 2 of a UINT, input 32, output 5.27 
// < +/-0.025% error for larger inputs
// 13/2 cycles max/min
@log2_uint_vlq {	(s0 != 0) ? pc := @nz	// chk zero  ** LOG2_UINT_VLQ() START **  
	pc := P7	// => RETURN
@nz	s1 := lzc(s0)	// norm
	P0 <<= s1
	P0 <<= 1	// chvar
	s4 := 0x2c5be890	// B, poly start
	P4 *xu= s0	// x(B)
	s5 := 0xac5be890	// A
	P5 -= P4	// A-x(B)
	P0 *xu= P5	// x*, poly end
	P0 >>= 4	// mant
	s2 := 31 - P1	// char
	P2 <<= 27
	P0 |= P2	// combine
	pc := P7 }	// RETURN =>  ** SUB END **
	
// LOG2_UINT_NP(0:a_i, 7:rtn_i | 0:log2_o) 
// return the log base 2 of a UINT, input 32, output 5.27 
// < -0.3% error for larger inputs, good enough for volume stuff?
// 9/2 cycles max/min
@log2_uint_np {	(s0 != 0) ? pc := @nz	// chk zero  ** LOG2_UINT_NP() START **  
	pc := P7	// => RETURN
@nz	s1 := lzc(s0)	// norm
	P0 <<= s1
	P0 <<= 1	// chvar
	P0 >>= 5	// mant
	s2 := 31 - P1	// char
	P2 <<= 27
	P0 |= P2	// combine
	pc := P7 }	// RETURN =>  ** SUB END **

	
// POW_UFRAC(0:x, 1:y, 7:rtn_i | 0:x^y) 
// return x^y, UFRAC ^ UFRAC = UFRAC
// 75/2 cycles max/min
@pow_ufrac {	(s0 != 0) ? pc := @nz	// chk zero  ** POW_UFRAC() START **  
	pc := P7, P1	// => RETURN
@nz	s7 := pc := @log2_uint	// <=> log2_uint()
	P0 := ~s0	// uint <=> ufrac
	P0 *xu= P1	// mult
	P0 := ~s0	// uint <=> ufrac
	s7 := pc := @exp2_uint	// <=> exp2_uint()
	pc := P7 }	// RETURN =>  ** SUB END **

	
// POW_UFRAC_UINT_NP(0:x, 1:y, 7:rtn_i | 0:x^y) 
// return x^y, UFRAC ^ UINT = UFRAC
// 8 + 14+10 = 32 cycles max
@pow_ufrac_uint_np {	(s0 != 0) ? pc := @nz	// chk zero  ** POW_UFRAC_UINT_NP() START **  
	pc := P7, P1	// => RETURN
@nz	s7 := pc := @log2_uint_np	// <=> log2_uint_np()
	P0 := ~s0	// uint <=> ufrac
	P0 *u= P1	// mult
	P0 := lim(s0)	// lim
	P0 := ~s0	// uint <=> ufrac
	s7 := pc := @exp2_uint_np	// <=> exp2_uint_np()
	pc := P7 }	// RETURN =>  ** SUB END **
	
	
// COS2_INT(0:in, 7:rtn | 0:out) 
// return int32 cosine of a INT input value, 2^32 cycle
// 26 cycles max/min 
@cos2_int {	s2 := sgn(s0)	// ** COS2_INT() START **  sgn(in)
	P0 <<= 1	// << 1
	s1 := sgn(s0)	// sgn in[30]
	P1 *= P2	// combine signs
	s2 := s0 >>> 31	// replicate in[30]
	P0 <<= 1	// poly_i
	P0 ^= P2	// in[31] ^ poly_i (reverse)
	P0 *xu= s0	// x^2 (do poly)
	s4 := 0xc84f	// F
	P4 *xu= s0	// x^2(F)
	s5 := 0x1e137a	// E
	P5 -= P4	// E-x^2(F)
	P5 *xu= s0	// x^2(E-x^2(F))
	s4 := 0x2aba1c0	// D
	P4 -= P5	// D-x^2(E-x^2(F))
	P4 *xu= s0	// x^2(C-x^2(D-x^2(E)))
	s5 := 0x20783cc8	// C
	P5 -= P4	// C-x^2(D-x^2(E-x^2(F)))
	P5 *xu= s0	// x^2(C-x^2(D-x^2(E-x^2(F))))
	s4 := 0x9de9e634	// B
	P4 -= P5	// B-x^2(C-x^2(D-x^2(E-x^2(F))))
	P4 *xu= P0	// x^2(B-x^2(C-x^2(D-x^2(E-x^2(F)))))
	s0 := 0x7fffffff	// A
	P0 -= P4	// A-x^2(B-x^2(C-x^2(D-x^2(E-x^2(F)))))
	P0 *= P1	// sign result
	pc := P7 }	// RETURN =>  ** SUB END **


// SIN2_INT_LQ(0:in, 7:rtn | 0:out) 
// return int32 sine of a INT input value, 2^32 cycle
// 16 MSbs have +/- 3 error, good enough for audio work
// 16 cycles max/min 
@sin2_int_lq {	s1 := sgn(s0)	// ** SIN2_INT_LQ() START **  sgn(in)
	P0 <<= 1	// << 1
	s2 := s0 >>> 31	// replicate in[30]
	P0 <<= 1	// poly_i
	P0 ^= P2	// in[31] ^ poly_i (reverse)
	s0 *xu= s0	// x^2 (do poly)
	s4 := 0x925d7ff	// C
	P4 *xu= s0	// x^2(C)
	s5 := 0x52239278	// B
	P5 -= P4	// B-x^2(C)
	P5 *xu= P0	// x^2(B-x^2(C))
	s4 := 0xc8fdba78	// A
	P4 -= P5	// A-x^2(B-x^2(C))
	P0 *xu= P4	// x(A-x^2(B-x^2(C)))
	P0 *= P1	// sign result
	pc := P7 }	// RETURN =>  ** SUB END **

	
// MUL_UINT_UFIX(0:uint_i, 4:sig_i, 5:exp_i, 7:rtn | 0:uint_o) 
// UINT *= UFIX
// sig_i is UFIX significand (UINT)
// exp_i is UFIX exponent (neg # of decimals)
// 10 cycles max/min 
@mul_uint_ufix {	s1 := s0	// cpy uint_i  ** MUL_UINT_UFIX() START **
	s5 +su= 32	// exp_i + 32
	s4 <<= P5	// frac := sig_i << (exp_i + 32)
	P1 *xu= P4	// uint_i * frac
	P4 <<= P5	// deci := sig_i << exp_i
	P0 *u= P4	// uint_i * deci
	P0 := lim(s0)	// lim
	P0 +u= P1	// deci + frac
	P0 := lim(s0)	// lim
	pc := P7 }	// RETURN =>  ** SUB END **


// MUL_INT_UFIX(0:int_i, 4:sig_i, 5:exp_i, 7:rtn | 0:int_o) 
// INT *= UFIX
// sig_i is UFIX significand (UINT)
// exp_i is UFIX exponent (neg # of decimals)
// 10 cycles max/min 
@mul_int_ufix {	s1 := s0	// cpy int_i  ** MUL_INT_UFIX() START **
	s5 +su= 32	// exp_i + 32
	s4 <<= P5	// frac := sig_i << (exp_i + 32)
	P1 *xsu= P4	// int_i * frac
	P4 <<= P5	// deci := sig_i << exp_i
	P0 *su= P4	// int_i * deci
	P0 := sat(s0)	// sat
	P0 +s= P1	// deci + frac
	P0 := sat(s0)	// sat
	pc := P7 }	// RETURN =>  ** SUB END **

// ONEHOT_TO_INT(0:one-hot, 7:rtn | 0:int)
// return int give one-hot
// note: returns -1 if one-hot=0 !
@onehot_to_int {	P0 := lzc(s0)	// ** ONEHOT_TO_INT() START **
	P0 := 31 - s0	// 31 - lzc(one-hot)
	pc := P7 }	// => RETURN ** SUB END **
