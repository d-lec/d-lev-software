	
// XMIX(0:in_0, 1:in_1, 4:xmix, 7:rtn | 0:out) 
// crossfades 2 signed inputs together
// can't ofl/ufl
// xmix is unsigned
// 5 cycles max
@xmix {	P1 *xsu= s4	// in_1 * xmix  ** XMIX() START **
	P4 := ~s4	// ~xmix
	P0 *xsu= P4	// in_0 * ~xmix
	P0 += P1	// add
	pc := P7 }	// RETURN =>  ** SUB END **

	
// VOL_BPF(0:v_in, 7:rtn | 0:v_in) 
// bp filter vol @10Hz
@vol_bpf {	s0 := nsb(s0)	// uns => sgn (cpy)  ** VOL_BPF **
	s1 := 0x55c2c6	// w := 10Hz
	s6 := @hp2_ds	// hp2_ds addr
	s7 := pc := @hp2	// <=> hp2()
	P0 := mem[P6]	// get lp
	mem[@v_bpf_ds] := P0	// sto v_bpf
	pc := P7	// RETURN =>
@hp2_ds {	mem[2] := ( 0 ) } }	// ** V_HP2_DS **  ** SUB END **
@v_bpf_ds {	mem[1] := ( 0 ) }	// ** V_BPF_DS **

	
// VOL_VEL(0:v_bpf, 1:kloc, 5:velo, 7:rtn | 5:v_out) 
// positive velocity envelope with location and velocity inputs gain-down
// unsigned I/O
@vol_vel {	(s0 !< 0) ? pc := @nlz	// (v_bpf !< 0)  ** VOL_VEL **
	P0 := 0	// lim(v_bpf)
@nlz	P0 *xu= P5	// v_bpf * velo
	s7 := pc := @log2_uint_np	// <=> log2_uint_np()
	P0 -u= P1	// log2 - kloc
	s5 := lim(P0)	// v_out := lim(log2 - kloc)
	pc := P7 }	// RETURN =>  ** SUB END **


// VOL_KNEE(0:v_in, 1:kloc, 4:knee, 7:rtn | 4:v_out) 
// envelope knee with variable threshold and slope
// applies downward slope to envelope below the threshold
// (v_in < kloc) ? v_out := kloc - (knee * (kloc - v_in))
// else v_out := v_in
// knee dynamic range expansion via -3/4 (~5 bits => ~7 bits)
// unsigned I/O
// 15/3 cycles max/min
@vol_knee {	(s0 <u s1) ? pc := @lt_kloc	// (v_in < kloc) ? ** VOL_KNEE() START **
	P4 := P0	// out := in
	pc := P7, P1	// => RETURN
@lt_kloc	s1 -u= P0	// kloc - v_in (cpy)
	P1 := lim(s1)	// lim
	s6 := 0xc000	// 3/4 (16.16 format, expand dynamic range)
	P4 -= P6	// knee - 3/4
	s4 >>>= 14	// knee >>> 14 (cpy)
	s1 *u= P4	// int := (kloc - v_in) * (knee >>> 14) (cpy)
	s5 := lim(P1)	// lim
	P4 <<= 18	// knee << 18
	P1 *xu= P4	// frac := (kloc - v_in) * (knee << 18)
	P5 +u= P1	// tot := int + frac
	P5 := lim(s5)	// lim
	P1 -u= P5	// kloc - tot
	s4 := lim(P1)	// v_out := lim(kloc - tot)
	pc := P7 }	// RETURN =>  ** SUB END **


// VOL_VEL_KNEE(0:v_in, 1:kloc, 4:knee, 5:velo, 7:rtn | 0:v_out) 
// linear volume velocity & curve & knee
// unsigned I/O
@vol_vel_knee {	s0 := mem[@v_bpf_ds]	// get v_bpf  ** VOL_VEL_KNEE() START **
	s1 >>= 2	// kloc >> 2  (cpy)
	P5 >>= 13	// velo >> 13
	s7 := pc := @vol_vel	// <=> vol_vel()
	P1 |= 0x3	// kloc | 0x3
	P1 >>r= 2	// kloc[0:1) => kloc[3/4:1) (-48dB to 0dB)
	s7 := pc := @vol_knee	// <=> vol_knee()
	P4 +u= P5	// vol_knee() + vol_vel()
	s0 := lim(P4)	// lim (mov)
	pc := P7 }	// RETURN =>  ** SUB END **


// VOL_DAMP(0:v_in, 1:dloc, 2:damp, 7:rtn | 2:v_damp) 
// volume switch of global damping
// unsigned I/O
@vol_damp {	s7 := pc := @xk_mod	// <=> xk_mod() ** VOL_DAMP() START **
	(P0 == 0) ? pc := @damp	// (xk_mod != 0) ?
	P2 := -1	// damp disable
@damp	mem[@v_damp_ds] := s2	// sto v_damp
	pc := P7 }	// RETURN =>  ** SUB END **
@v_damp_ds {	mem[1] := ( 0 ) }	// ** V_DAMP_DS **

	
// ENV_AD(0:in, 1:fall, 2:rise, 7:rtn | 0:out) 
// linear attack & decay envelope generator w/ peak hold
// follow / hold input if peak less than in or accum
// (in >= peak)    ? peak := in (peak hold)
// (accum >= peak) ? peak := in (follow in)
// unsigned I/O
@env_ad {	s3 := mem[@peak]	// get peak  ** ENV_AD() START **
	(s0 <u s3) ? pc := @in_lt_pk	// (in < peak) ? skip sto
	mem[@peak] := s0	// peak := in (sto, peak hold)
@in_lt_pk	s4 := mem[@accum]	// get accum
	(P4 <u P3) ? pc := @ac_lt_pk	// (accum < peak) ? skip sto
	mem[@peak] := s0	// peak := in (sto, follow input)
@ac_lt_pk	P0 := mem[@peak]	// get peak
	s6 := @accum	// addr
	s7 := pc := @slim_ubi	// <=> slim_ubi()
	pc := P7	// RETURN =>
@peak	mem[1] := ( 0 ) 	// peak
@accum	mem[1] := ( 0 ) }	// accum   ** SUB END **


// VOL_CVOL(0:v_in\p_lin, 1:cvol, 7:rtn | 0:v_out) 
// reduce volume at note boundaries
@vol_cvol {	s7 := pc := @pitch_cntr	// <=> pitch_cntr()  ** VOL_CVOL() START **
	P0 *xu= P0	// cntr^2
	P1 *xu= P0	// cvol * cntr^2
	P0 -u= P1	// v_in - (cvol * cntr^2)
	P0 := lim(s0)	// lim
	pc := P7 }	// RETURN =>  ** SUB END **
