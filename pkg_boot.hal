
// BOOT_LOADER(7:rtn | 0:flg) 
// check SPI image, abort if pb[7] pressed or CRC bad, else copy to memory
// flg: 0=SPI boot, else FPGA boot
`@boot_loader {	s0 := 0xff00	// ** BOOT_LOADER() START **
	reg[`reg_vect] := P0	// disable XSRs
	s0 := reg[`reg_enc]	// get reg_enc
	P0 >>= 23	// pb[7]
	(s0 != 0) ? pc := @done	// (pb[7] != 0) ? abort
	s7 := pc := @spi_csn_hi	// <=> spi_csn_hi() (just to be sure)
	P0 := `spi_sw_offs	// SPI software offset (pop pb[7])
	s7 := pc := @spi_crc32	// <=> spi_crc32()
	s1 := `spi_crc_sig	// good crc signature
	P0 -= P1	// crc-sig
	(s0 != 0) ? pc := @done	// (crc-sig != 0) ? abort
	s0 := `spi_sw_offs	// SPI software offset
	P0 := swp(s0)	// offs big <=> little
	P0 |= 0x3	// offs | 0x3 (spi rd)
	s7 := pc := @spi_w32	// <=> spi_w32()
	s7 := pc := @spi_r32	// <=> spi_r32()
	s2 := P0 - 8	// mem_addr max := len - 8 (len + crc values = 8 bytes)
	s1 := 0	// init mem_addr
@loop	s7 := pc := @spi_r32	// <=> spi_r32() <loop start> 
	mem[s1] := P0	// write to mem
	P1 += 4	// mem_addr++
	(s1 <u s2) ? pc := @loop	// (mem_addr < max) ? <loop end> 
	s7 := pc := @spi_csn_hi	// <=> spi_csn_hi()
	P2 P1	// clean up
@done	pc := P7	// => RETURN
	`include "pkg_spi.hal" 	// local copy of subs
	}	// ** SUB END **
